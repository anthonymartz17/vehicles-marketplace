{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getFirestore, collection, doc, getDoc, getDocs, addDoc, query, where } from \"firebase/firestore\";\nimport { getStorage, ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\nimport { v4 as uuidv4 } from \"uuid\";\n// Create a reference to the storage service\nconst storage = getStorage();\n\n//initialize service\nconst db = getFirestore();\nexport default {\n  async getAds(dealerId) {\n    try {\n      const colRef = collection(db, \"cars\");\n      const q = query(colRef, where(\"dealerId\", \"==\", dealerId));\n      const snapshot = await getDocs(q);\n      const data = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getVehicleById(vehicleId) {\n    console.log(vehicleId, \"el id\");\n    try {\n      const carDocRef = doc(db, \"cars\", vehicleId);\n      const carDocSnapshot = await getDoc(carDocRef);\n      if (carDocSnapshot.exists()) {\n        return {\n          id: carDocSnapshot.id,\n          ...carDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Vehicle not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  async createAd(data) {\n    try {\n      console.log(data, 'api');\n      const colRef = collection(db, \"cars\");\n      const response = await addDoc(colRef, data);\n      console.log(response.snapshot.id, response);\n      return response;\n\n      // return profile\n    } catch (error) {\n      throw error;\n    }\n  },\n  async uploadImages({\n    imgFiles,\n    carId\n  }) {\n    try {\n      // const urlsUploaded = await Promise.all(\n      //uploads each image to firebase storage and returns array with url from each one\n      const uplaodedImgRefPromised = imgFiles.map(async file => {\n        //creates unique name id for image\n        const uniqueId = uuidv4();\n        const imageName = `images/cars/${carId}_${uniqueId}_${file.name}`;\n\n        //creates refference unique for image\n        const storageRef = ref(storage, imageName);\n        //uploads image to firebase\n        await uploadBytes(storageRef, file);\n        return imageName;\n      });\n      const imgUploadedRefs = await Promise.all(uplaodedImgRefPromised);\n      return imgUploadedRefs;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async updateAd({\n    vehicleId,\n    data\n  }) {\n    try {\n      const vehicleDocRef = doc(db, \"cars\", vehicleId);\n      const vehicleDocSnapshot = await getDoc(vehicleDocRef);\n      console.log(vehicleDocSnapshot);\n      if (vehicleDocSnapshot.exists()) {\n        await updateDoc(vehicleDocRef, data);\n        return {\n          id: vehicleDocSnapshot.id,\n          ...vehicleDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Car not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getDealers() {\n    try {\n      let dealersData = [];\n      const colRef = collection(db, \"dealers\");\n      const snapshot = await getDocs(colRef);\n      snapshot.docs.forEach(doc => {\n        dealersData.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      return dealersData;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getDealerById(dealerId) {\n    console.log(dealerId, \"el dealer\");\n    try {\n      const dealerDocRef = doc(db, \"dealers\", dealerId);\n      const dealerDocSnapshot = await getDoc(dealerDocRef);\n      if (dealerDocSnapshot.exists()) {\n        return {\n          id: dealerDocSnapshot.id,\n          ...dealerDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Dealer not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n// collection refference","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","getDocs","addDoc","query","where","getStorage","ref","getDownloadURL","uploadBytes","v4","uuidv4","storage","db","getAds","dealerId","colRef","q","snapshot","data","docs","map","id","error","getVehicleById","vehicleId","console","log","carDocRef","carDocSnapshot","exists","Error","createAd","response","uploadImages","imgFiles","carId","uplaodedImgRefPromised","file","uniqueId","imageName","name","storageRef","imgUploadedRefs","Promise","all","updateAd","vehicleDocRef","vehicleDocSnapshot","updateDoc","getDealers","dealersData","forEach","push","getDealerById","dealerDocRef","dealerDocSnapshot"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/helpers/apiAds.js"],"sourcesContent":["import {\r\n\tgetFirestore,\r\n\tcollection,\r\n\tdoc,\r\n\tgetDoc,\r\n\tgetDocs,\r\n\taddDoc,\r\n\tquery,\r\n\twhere,\r\n} from \"firebase/firestore\";\r\nimport { getStorage, ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// Create a reference to the storage service\r\nconst storage = getStorage();\r\n\r\n//initialize service\r\nconst db = getFirestore();\r\n\r\nexport default {\r\n\tasync getAds(dealerId) {\r\n\t\ttry {\r\n\t\t\tconst colRef = collection(db, \"cars\");\r\n\t\t\tconst q = query(colRef, where(\"dealerId\", \"==\", dealerId));\r\n\t\t\tconst snapshot = await getDocs(q);\r\n\t\t\tconst data = snapshot.docs.map((doc) => ({\r\n\t\t\t\tid: doc.id,\r\n\t\t\t\t...doc.data(),\r\n\t\t\t}));\r\n\t\t\treturn data;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync getVehicleById(vehicleId) {\r\n\t\tconsole.log(vehicleId, \"el id\");\r\n\t\ttry {\r\n\t\t\tconst carDocRef = doc(db, \"cars\", vehicleId);\r\n\r\n\t\t\tconst carDocSnapshot = await getDoc(carDocRef);\r\n\r\n\t\t\tif (carDocSnapshot.exists()) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: carDocSnapshot.id,\r\n\t\t\t\t\t...carDocSnapshot.data(),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Vehicle not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync createAd(data) {\r\n\t\ttry {\r\n\t\t\tconsole.log(data,'api')\r\n\t\t\tconst colRef = collection(db, \"cars\");\r\n\t\r\n\t\t\tconst response = await addDoc(colRef, data);\r\n      console.log(response.snapshot.id, response)\r\n\t\t\treturn response;\r\n\r\n\t\t\t// return profile\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\r\n\tasync uploadImages({ imgFiles, carId }) {\r\n\t\ttry {\r\n\t\t\t// const urlsUploaded = await Promise.all(\r\n\t\t\t//uploads each image to firebase storage and returns array with url from each one\r\n\t\t\tconst uplaodedImgRefPromised = imgFiles.map(async (file) => {\r\n\t\t\t\t//creates unique name id for image\r\n\t\t\t\tconst uniqueId = uuidv4();\r\n\t\t\t\tconst imageName = `images/cars/${carId}_${uniqueId}_${file.name}`;\r\n\r\n\t\t\t\t//creates refference unique for image\r\n\t\t\t\tconst storageRef = ref(storage, imageName);\r\n\t\t\t\t//uploads image to firebase\r\n\t\t\t\tawait uploadBytes(storageRef, file);\r\n\r\n\t\t\t\treturn imageName;\r\n\t\t\t});\r\n\t\t\tconst imgUploadedRefs = await Promise.all(uplaodedImgRefPromised);\r\n\t\t\treturn imgUploadedRefs;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync updateAd({vehicleId, data}) {\r\n    try {\r\n      const vehicleDocRef = doc(db, \"cars\", vehicleId);\r\n      const vehicleDocSnapshot = await getDoc(vehicleDocRef);\r\n     console.log(vehicleDocSnapshot)\r\n      if (vehicleDocSnapshot.exists()) {\r\n        await updateDoc(vehicleDocRef, data);\r\n        return { id: vehicleDocSnapshot.id, ...vehicleDocSnapshot.data() };\r\n      } else {\r\n        throw new Error(\"Car not found.\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\tasync getDealers() {\r\n\t\ttry {\r\n\t\t\tlet dealersData = [];\r\n\t\t\tconst colRef = collection(db, \"dealers\");\r\n\t\t\tconst snapshot = await getDocs(colRef);\r\n\t\t\tsnapshot.docs.forEach((doc) => {\r\n\t\t\t\tdealersData.push({\r\n\t\t\t\t\tid: doc.id,\r\n\t\t\t\t\t...doc.data(),\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn dealersData;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync getDealerById(dealerId) {\r\n\t\tconsole.log(dealerId, \"el dealer\");\r\n\t\ttry {\r\n\t\t\tconst dealerDocRef = doc(db, \"dealers\", dealerId);\r\n\t\t\tconst dealerDocSnapshot = await getDoc(dealerDocRef);\r\n\r\n\t\t\tif (dealerDocSnapshot.exists()) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: dealerDocSnapshot.id,\r\n\t\t\t\t\t...dealerDocSnapshot.data(),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Dealer not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n};\r\n// collection refference\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}