{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getFirestore, collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc, query, where } from \"firebase/firestore\";\nimport { getStorage, ref, getDownloadURL, getMetadata, uploadBytes } from \"firebase/storage\";\nimport { v4 as uuidv4 } from \"uuid\";\n// Create a reference to the storage service\nconst storage = getStorage();\n\n//initialize service\nconst db = getFirestore();\nexport default {\n  async getAds(dealerId) {\n    try {\n      const colRef = collection(db, \"cars\");\n      const q = query(colRef, where(\"dealerId\", \"==\", dealerId));\n      const snapshot = await getDocs(q);\n      const data = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getVehicleById(vehicleId) {\n    try {\n      const carDocRef = doc(db, \"cars\", vehicleId);\n      const carDocSnapshot = await getDoc(carDocRef);\n      if (carDocSnapshot.exists()) {\n        return {\n          id: carDocSnapshot.id,\n          ...carDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Vehicle not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  async createAd(vehicleData) {\n    try {\n      console.log(vehicleData, \"api\");\n      const colRef = collection(db, \"cars\");\n      const response = await addDoc(colRef, vehicleData);\n      return response;\n\n      // return profile\n    } catch (error) {\n      throw error;\n    }\n  },\n  async uploadImages({\n    vehicleImages,\n    vehicleId\n  }) {\n    try {\n      // const urlsUploaded = await Promise.all(\n      //uploads each image to firebase storage and returns array with url from each one\n      const imgPathsPromised = vehicleImages.map(async img => {\n        //creates unique name id for image\n        const uniqueId = uuidv4();\n        const imageName = `images/cars/${vehicleId}_${uniqueId}_${img.name}`;\n\n        //creates refference unique for image\n        const storageRef = ref(storage, imageName);\n        //uploads image to firebase\n        await uploadBytes(storageRef, img);\n        return imageName;\n      });\n      const imgPaths = await Promise.all(imgPathsPromised);\n      console.log(imgPaths, \"from api\");\n      return imgPaths;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async deleteImages(image) {\n    try {\n      // const urlsUploaded = await Promise.all(\n      //uploads each image to firebase storage and returns array with url from each one\n      const imgPathsPromised = vehicleImages.map(async img => {\n        //creates unique name id for image\n        const uniqueId = uuidv4();\n        const imageName = `images/cars/${vehicleId}_${uniqueId}_${img.name}`;\n\n        //creates refference unique for image\n        const storageRef = ref(storage, imageName);\n        //uploads image to firebase\n        await uploadBytes(storageRef, img);\n        return imageName;\n      });\n      const imgPaths = await Promise.all(imgPathsPromised);\n      console.log(imgPaths, \"from api\");\n      return imgPaths;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getImagesById(imagePaths) {\n    try {\n      const imageDetails = [];\n      for (const imagePath of imagePaths) {\n        const imageRef = ref(storage, imagePath);\n        const imageUrl = await getDownloadURL(imageRef);\n        // Get the metadata of the image\n        const metadata = await getMetadata(imageRef);\n\n        // Extract the name, type, and size from the metadata\n        const name = metadata.name;\n        const type = metadata.contentType;\n        const size = metadata.size;\n\n        // Push the image details to the array\n        imageDetails.push({\n          url: imageUrl,\n          name: name,\n          type: type,\n          size: size\n        });\n      }\n      return imageDetails;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async updateAd({\n    vehicleData,\n    vehicleId\n  }) {\n    console.log(vehicleId, \"elid\");\n    try {\n      const vehicleDocRef = doc(db, \"cars\", vehicleId);\n      const vehicleDocSnapshot = await getDoc(vehicleDocRef);\n      if (vehicleDocSnapshot.exists()) {\n        await updateDoc(vehicleDocRef, vehicleData);\n        return {\n          id: vehicleDocSnapshot.id,\n          ...vehicleDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Car not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  async deleteAd(vehicleId) {\n    try {\n      const vehicleDocRef = doc(db, \"cars\", vehicleId);\n      const vehicleDocSnapshot = await getDoc(vehicleDocRef);\n      if (vehicleDocSnapshot.exists()) {\n        await deleteDoc(vehicleDocRef);\n        return {\n          success: true,\n          message: \"Car deleted successfully.\"\n        };\n      } else {\n        throw new Error(\"Car not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getDealers() {\n    try {\n      let dealersData = [];\n      const colRef = collection(db, \"dealers\");\n      const snapshot = await getDocs(colRef);\n      snapshot.docs.forEach(doc => {\n        dealersData.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      return dealersData;\n    } catch (error) {\n      throw error;\n    }\n  },\n  async getDealerById(dealerId) {\n    console.log(dealerId, \"el dealer\");\n    try {\n      const dealerDocRef = doc(db, \"dealers\", dealerId);\n      const dealerDocSnapshot = await getDoc(dealerDocRef);\n      if (dealerDocSnapshot.exists()) {\n        return {\n          id: dealerDocSnapshot.id,\n          ...dealerDocSnapshot.data()\n        };\n      } else {\n        throw new Error(\"Dealer not found.\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n// collection refference","map":{"version":3,"names":["getFirestore","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","query","where","getStorage","ref","getDownloadURL","getMetadata","uploadBytes","v4","uuidv4","storage","db","getAds","dealerId","colRef","q","snapshot","data","docs","map","id","error","getVehicleById","vehicleId","carDocRef","carDocSnapshot","exists","Error","createAd","vehicleData","console","log","response","uploadImages","vehicleImages","imgPathsPromised","img","uniqueId","imageName","name","storageRef","imgPaths","Promise","all","deleteImages","image","getImagesById","imagePaths","imageDetails","imagePath","imageRef","imageUrl","metadata","type","contentType","size","push","url","updateAd","vehicleDocRef","vehicleDocSnapshot","deleteAd","success","message","getDealers","dealersData","forEach","getDealerById","dealerDocRef","dealerDocSnapshot"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/helpers/apiAds.js"],"sourcesContent":["import {\r\n\tgetFirestore,\r\n\tcollection,\r\n\tdoc,\r\n\tgetDoc,\r\n\tgetDocs,\r\n\taddDoc,\r\n\tupdateDoc,\r\n\tdeleteDoc,\r\n\tquery,\r\n\twhere,\r\n} from \"firebase/firestore\";\r\nimport {\r\n\tgetStorage,\r\n\tref,\r\n\tgetDownloadURL,\r\n\tgetMetadata,\r\n\tuploadBytes,\r\n} from \"firebase/storage\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// Create a reference to the storage service\r\nconst storage = getStorage();\r\n\r\n//initialize service\r\nconst db = getFirestore();\r\n\r\nexport default {\r\n\tasync getAds(dealerId) {\r\n\t\ttry {\r\n\t\t\tconst colRef = collection(db, \"cars\");\r\n\t\t\tconst q = query(colRef, where(\"dealerId\", \"==\", dealerId));\r\n\t\t\tconst snapshot = await getDocs(q);\r\n\t\t\tconst data = snapshot.docs.map((doc) => ({\r\n\t\t\t\tid: doc.id,\r\n\t\t\t\t...doc.data(),\r\n\t\t\t}));\r\n\t\t\treturn data;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync getVehicleById(vehicleId) {\r\n\t\ttry {\r\n\t\t\tconst carDocRef = doc(db, \"cars\", vehicleId);\r\n\r\n\t\t\tconst carDocSnapshot = await getDoc(carDocRef);\r\n\r\n\t\t\tif (carDocSnapshot.exists()) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: carDocSnapshot.id,\r\n\t\t\t\t\t...carDocSnapshot.data(),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Vehicle not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync createAd(vehicleData) {\r\n\t\ttry {\r\n\t\t\tconsole.log(vehicleData, \"api\");\r\n\t\t\tconst colRef = collection(db, \"cars\");\r\n\r\n\t\t\tconst response = await addDoc(colRef, vehicleData);\r\n\r\n\t\t\treturn response;\r\n\r\n\t\t\t// return profile\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\r\n\tasync uploadImages({ vehicleImages, vehicleId }) {\r\n\t\ttry {\r\n\t\t\t// const urlsUploaded = await Promise.all(\r\n\t\t\t//uploads each image to firebase storage and returns array with url from each one\r\n\t\t\tconst imgPathsPromised = vehicleImages.map(async (img) => {\r\n\t\t\t\t//creates unique name id for image\r\n\t\t\t\tconst uniqueId = uuidv4();\r\n\t\t\t\tconst imageName = `images/cars/${vehicleId}_${uniqueId}_${img.name}`;\r\n\r\n\t\t\t\t//creates refference unique for image\r\n\t\t\t\tconst storageRef = ref(storage, imageName);\r\n\t\t\t\t//uploads image to firebase\r\n\t\t\t\tawait uploadBytes(storageRef, img);\r\n\r\n\t\t\t\treturn imageName;\r\n\t\t\t});\r\n\t\t\tconst imgPaths = await Promise.all(imgPathsPromised);\r\n\t\t\tconsole.log(imgPaths, \"from api\");\r\n\t\t\treturn imgPaths;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\r\n\tasync deleteImages(image) {\r\n\t\ttry {\r\n\t\t\t// const urlsUploaded = await Promise.all(\r\n\t\t\t//uploads each image to firebase storage and returns array with url from each one\r\n\t\t\tconst imgPathsPromised = vehicleImages.map(async (img) => {\r\n\t\t\t\t//creates unique name id for image\r\n\t\t\t\tconst uniqueId = uuidv4();\r\n\t\t\t\tconst imageName = `images/cars/${vehicleId}_${uniqueId}_${img.name}`;\r\n\r\n\t\t\t\t//creates refference unique for image\r\n\t\t\t\tconst storageRef = ref(storage, imageName);\r\n\t\t\t\t//uploads image to firebase\r\n\t\t\t\tawait uploadBytes(storageRef, img);\r\n\r\n\t\t\t\treturn imageName;\r\n\t\t\t});\r\n\t\t\tconst imgPaths = await Promise.all(imgPathsPromised);\r\n\t\t\tconsole.log(imgPaths, \"from api\");\r\n\t\t\treturn imgPaths;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync getImagesById(imagePaths) {\r\n\t\ttry {\r\n\t\t\tconst imageDetails = [];\r\n\r\n\t\t\tfor (const imagePath of imagePaths) {\r\n\t\t\t\tconst imageRef = ref(storage, imagePath);\r\n\t\t\t\tconst imageUrl = await getDownloadURL(imageRef);\r\n\t\t\t\t// Get the metadata of the image\r\n\t\t\t\tconst metadata = await getMetadata(imageRef);\r\n\r\n\t\t\t\t// Extract the name, type, and size from the metadata\r\n\t\t\t\tconst name = metadata.name;\r\n\t\t\t\tconst type = metadata.contentType;\r\n\t\t\t\tconst size = metadata.size;\r\n\r\n\t\t\t\t// Push the image details to the array\r\n\t\t\t\timageDetails.push({\r\n\t\t\t\t\turl: imageUrl,\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tsize: size,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn imageDetails;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync updateAd({ vehicleData, vehicleId }) {\r\n\t\tconsole.log(vehicleId, \"elid\");\r\n\t\ttry {\r\n\t\t\tconst vehicleDocRef = doc(db, \"cars\", vehicleId);\r\n\r\n\t\t\tconst vehicleDocSnapshot = await getDoc(vehicleDocRef);\r\n\r\n\t\t\tif (vehicleDocSnapshot.exists()) {\r\n\t\t\t\tawait updateDoc(vehicleDocRef, vehicleData);\r\n\t\t\t\treturn { id: vehicleDocSnapshot.id, ...vehicleDocSnapshot.data() };\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Car not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync deleteAd(vehicleId) {\r\n\t\ttry {\r\n\t\t\tconst vehicleDocRef = doc(db, \"cars\", vehicleId);\r\n\r\n\t\t\tconst vehicleDocSnapshot = await getDoc(vehicleDocRef);\r\n\r\n\t\t\tif (vehicleDocSnapshot.exists()) {\r\n\t\t\t\tawait deleteDoc(vehicleDocRef);\r\n\t\t\t\treturn { success: true, message: \"Car deleted successfully.\" };\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Car not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\r\n\tasync getDealers() {\r\n\t\ttry {\r\n\t\t\tlet dealersData = [];\r\n\t\t\tconst colRef = collection(db, \"dealers\");\r\n\t\t\tconst snapshot = await getDocs(colRef);\r\n\t\t\tsnapshot.docs.forEach((doc) => {\r\n\t\t\t\tdealersData.push({\r\n\t\t\t\t\tid: doc.id,\r\n\t\t\t\t\t...doc.data(),\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn dealersData;\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n\tasync getDealerById(dealerId) {\r\n\t\tconsole.log(dealerId, \"el dealer\");\r\n\t\ttry {\r\n\t\t\tconst dealerDocRef = doc(db, \"dealers\", dealerId);\r\n\t\t\tconst dealerDocSnapshot = await getDoc(dealerDocRef);\r\n\r\n\t\t\tif (dealerDocSnapshot.exists()) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: dealerDocSnapshot.id,\r\n\t\t\t\t\t...dealerDocSnapshot.data(),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Dealer not found.\");\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t},\r\n};\r\n// collection refference\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}