{"ast":null,"code":"export default {\n  data() {\n    return {\n      user: {\n        user_name: '',\n        email: '',\n        password: ''\n      },\n      submitted: false,\n      isError: false,\n      errorMsg: ''\n    };\n  },\n  methods: {\n    tryToRegisterIn() {\n      this.submitted = true;\n      if (!this.isValidForm()) {\n        return;\n      } else {\n        // Perform registration logic here\n        // Example: calling an action from Vuex store\n        this.$store.dispatch('auth/signUp', {\n          username: this.user.user_name,\n          email: this.user.email,\n          password: this.user.password\n        }).then(() => {\n          // Handle successful registration\n          localStorage.setItem('userToConfirm', JSON.stringify({\n            user: this.user.user_name,\n            email: this.user.email\n          }));\n          this.$router.replace({\n            name: 'email-verification'\n          });\n        }).catch(error => {\n          // Handle registration error\n          this.ALERT({\n            isSuccess: false,\n            isError: true,\n            error: error\n          });\n        });\n      }\n    },\n    clearAlert() {\n      // Clear alert logic here\n      this.isError = false;\n      this.errorMsg = '';\n    },\n    isValidForm() {\n      // Validate form logic here\n      if (!this.user.user_name || !this.user.email || !this.user.password || !this.isValidEmail(this.user.email)) {\n        return false;\n      }\n      return true;\n    },\n    isValidEmail(email) {\n      // Email validation logic here\n      // Example: using regular expression\n      const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      return emailRegex.test(email);\n    }\n  }\n};","map":{"version":3,"names":["data","user","user_name","email","password","submitted","isError","errorMsg","methods","tryToRegisterIn","isValidForm","$store","dispatch","username","then","localStorage","setItem","JSON","stringify","$router","replace","name","catch","error","ALERT","isSuccess","clearAlert","isValidEmail","emailRegex","test"],"sources":["src/views/joinus/register-page.vue"],"sourcesContent":["      <script>\r\n      export default {\r\n        data() {\r\n          return {\r\n            user: {\r\n              user_name: '',\r\n              email: '',\r\n              password: '',\r\n            },\r\n            submitted: false,\r\n            isError: false,\r\n            errorMsg: '',\r\n          };\r\n        },\r\n        methods: {\r\n          tryToRegisterIn() {\r\n            this.submitted = true;\r\n            if (!this.isValidForm()) {\r\n              return;\r\n            } else {\r\n              // Perform registration logic here\r\n              // Example: calling an action from Vuex store\r\n              this.$store.dispatch('auth/signUp', {\r\n                username: this.user.user_name,\r\n                email: this.user.email,\r\n                password: this.user.password,\r\n              }).then(() => {\r\n                // Handle successful registration\r\n                localStorage.setItem('userToConfirm', JSON.stringify({\r\n                  user: this.user.user_name,\r\n                  email: this.user.email,\r\n                }));\r\n                this.$router.replace({ name: 'email-verification' });\r\n              }).catch((error) => {\r\n                // Handle registration error\r\n                this.ALERT({\r\n                  isSuccess: false,\r\n                  isError: true,\r\n                  error: error,\r\n                });\r\n              });\r\n            }\r\n          },\r\n          clearAlert() {\r\n            // Clear alert logic here\r\n            this.isError = false;\r\n            this.errorMsg = '';\r\n          },\r\n          isValidForm() {\r\n            // Validate form logic here\r\n            if (!this.user.user_name || !this.user.email || !this.user.password || !this.isValidEmail(this.user.email)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          isValidEmail(email) {\r\n            // Email validation logic here\r\n            // Example: using regular expression\r\n            const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n            return emailRegex.test(email);\r\n          },\r\n        },\r\n      };\r\n      </script>\r\n      \r\n      <template>\r\n        <div>\r\n            <form class=\"form\" @submit.prevent=\"tryToLogIn\">\r\n                <div class=\"form-field-container\">\r\n                    <label for=\"username\" class=\"form-label\">User Name</label>\r\n                    <input\r\n                        id=\"username-1\"\r\n                        v-model=\"user_name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter username\"\r\n                        :class=\"[\r\n                            'form-input',\r\n                            { 'is-invalid ': submitted && !$v.user_name.required },\r\n                        ]\"\r\n                    />\r\n                    <div\r\n                        v-if=\"submitted && !$v.user_name.required\"\r\n                        class=\"invalid-feedback\"\r\n                    >\r\n                        Username is required.\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-field-container\">\r\n                    <label for=\"username\" class=\"form-label\">User Name</label>\r\n                    <input\r\n                        id=\"username-1\"\r\n                        v-model=\"user_name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter username\"\r\n                        :class=\"[\r\n                            'form-input',\r\n                            { 'is-invalid ': submitted && !$v.user_name.required },\r\n                        ]\"\r\n                    />\r\n                    <div\r\n                        v-if=\"submitted && !$v.user_name.required\"\r\n                        class=\"invalid-feedback\"\r\n                    >\r\n                        Username is required.\r\n                    </div>\r\n                </div>\r\n    \r\n                <div class=\"form-field-container\">\r\n                    <label for=\"input-2\" class=\"form-label\">Password</label>\r\n                    <input\r\n                        id=\"input-2\"\r\n                        v-model=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        :class=\"[\r\n                            'form-input',\r\n                            { 'is-invalid': submitted && !$v.password.required },\r\n                        ]\"\r\n                    />\r\n                    <div v-if=\"submitted && !$v.password.required\" class=\"invalid-feedback\">\r\n                        Password is required.\r\n                    </div>\r\n                </div>\r\n                <!-- <div class=\"form-check mb-3\">\r\n                    <input\r\n                        class=\"form-check-input\"\r\n                        id=\"customControlInline\"\r\n                        name=\"checkbox-1\"\r\n                        value=\"accepted\"\r\n                        :unchecked-value=\"not_accepted\"\r\n                        type=\"checkbox\"\r\n                    />\r\n                    <label class=\"form-check-label\" for=\"customControlInline\">\r\n                        Remember me\r\n                    </label>\r\n                </div> -->\r\n                <div class=\"submit-btn\">\r\n                    <button type=\"submit\" class=\"btn\">Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </template>\r\n    \r\n    <style lang=\"scss\" scoped>\r\n    .invalid-feedback {\r\n        color: red;\r\n    }\r\n    .is-invalid {\r\n        border: 1px solid red;\r\n    }\r\n    .form {\r\n        margin: 1em;\r\n        height: 20em;\r\n    }\r\n    .form-label {\r\n        font: $font-text-bold;\r\n    }\r\n    .form-input {\r\n        height: 3em;\r\n        border-radius: 5px;\r\n        padding-inline: 0.5em;\r\n        font: $font-text;\r\n    }\r\n    .form-field-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-bottom: 1em;\r\n        //  font: $font-text;\r\n    }\r\n    </style>\r\n    "],"mappings":"AACA;EACAA,KAAA;IACA;MACAC,IAAA;QACAC,SAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,SAAA;MACAC,OAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,gBAAA;MACA,KAAAJ,SAAA;MACA,UAAAK,WAAA;QACA;MACA;QACA;QACA;QACA,KAAAC,MAAA,CAAAC,QAAA;UACAC,QAAA,OAAAZ,IAAA,CAAAC,SAAA;UACAC,KAAA,OAAAF,IAAA,CAAAE,KAAA;UACAC,QAAA,OAAAH,IAAA,CAAAG;QACA,GAAAU,IAAA;UACA;UACAC,YAAA,CAAAC,OAAA,kBAAAC,IAAA,CAAAC,SAAA;YACAjB,IAAA,OAAAA,IAAA,CAAAC,SAAA;YACAC,KAAA,OAAAF,IAAA,CAAAE;UACA;UACA,KAAAgB,OAAA,CAAAC,OAAA;YAAAC,IAAA;UAAA;QACA,GAAAC,KAAA,CAAAC,KAAA;UACA;UACA,KAAAC,KAAA;YACAC,SAAA;YACAnB,OAAA;YACAiB,KAAA,EAAAA;UACA;QACA;MACA;IACA;IACAG,WAAA;MACA;MACA,KAAApB,OAAA;MACA,KAAAC,QAAA;IACA;IACAG,YAAA;MACA;MACA,UAAAT,IAAA,CAAAC,SAAA,UAAAD,IAAA,CAAAE,KAAA,UAAAF,IAAA,CAAAG,QAAA,UAAAuB,YAAA,MAAA1B,IAAA,CAAAE,KAAA;QACA;MACA;MACA;IACA;IACAwB,aAAAxB,KAAA;MACA;MACA;MACA,MAAAyB,UAAA;MACA,OAAAA,UAAA,CAAAC,IAAA,CAAA1B,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}