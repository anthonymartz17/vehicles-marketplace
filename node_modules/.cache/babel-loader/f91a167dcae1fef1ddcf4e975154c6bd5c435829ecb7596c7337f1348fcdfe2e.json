{"ast":null,"code":"export default {\n  data() {\n    return {\n      user: {\n        user_name: '',\n        email: '',\n        password: ''\n      },\n      submitted: false,\n      isError: false,\n      errorMsg: ''\n    };\n  },\n  methods: {\n    tryToRegisterIn() {\n      this.submitted = true;\n      if (!this.isValidForm()) {\n        return;\n      } else {\n        // Perform registration logic here\n        // Example: calling an action from Vuex store\n        this.$store.dispatch('auth/signUp', {\n          username: this.user.user_name,\n          email: this.user.email,\n          password: this.user.password\n        }).then(() => {\n          // Handle successful registration\n          localStorage.setItem('userToConfirm', JSON.stringify({\n            user: this.user.user_name,\n            email: this.user.email\n          }));\n          this.$router.replace({\n            name: 'email-verification'\n          });\n        }).catch(error => {\n          // Handle registration error\n          this.ALERT({\n            isSuccess: false,\n            isError: true,\n            error: error\n          });\n        });\n      }\n    },\n    clearAlert() {\n      // Clear alert logic here\n      this.isError = false;\n      this.errorMsg = '';\n    },\n    isValidForm() {\n      // Validate form logic here\n      if (!this.user.user_name || !this.user.email || !this.user.password || !this.isValidEmail(this.user.email)) {\n        return false;\n      }\n      return true;\n    },\n    isValidEmail(email) {\n      // Email validation logic here\n      // Example: using regular expression\n      const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      return emailRegex.test(email);\n    }\n  }\n};","map":{"version":3,"names":["data","user","user_name","email","password","submitted","isError","errorMsg","methods","tryToRegisterIn","isValidForm","$store","dispatch","username","then","localStorage","setItem","JSON","stringify","$router","replace","name","catch","error","ALERT","isSuccess","clearAlert","isValidEmail","emailRegex","test"],"sources":["src/views/joinus/register-page.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div v-if=\"isError\" class=\"alert mt-3\" role=\"alert\" variant=\"danger\" @dismissed=\"clearAlert\">\r\n        {{ errorMsg }}\r\n      </div>\r\n  \r\n      <form class=\"p-2\" @submit.prevent=\"tryToRegisterIn\">\r\n        <div class=\"form-group mb-3\">\r\n          <label for=\"username\">Username</label>\r\n          <input id=\"username\" v-model=\"user.user_name\" type=\"text\" class=\"form-control\" placeholder=\"Enter username\" :class=\"{'is-invalid': submitted && !user.user_name}\" />\r\n          <div v-if=\"submitted && !user.user_name\" class=\"invalid-feedback\">Username is required.</div>\r\n        </div>\r\n  \r\n        <div class=\"form-group mb-3\">\r\n          <label for=\"email\">Email</label>\r\n          <input id=\"email\" v-model=\"user.email\" type=\"email\" class=\"form-control\" placeholder=\"Enter email\" :class=\"{'is-invalid': submitted && (!user.email || !isValidEmail(user.email))}\" />\r\n          <div v-if=\"submitted && (!user.email || !isValidEmail(user.email))\" class=\"invalid-feedback\">\r\n            <span v-if=\"!user.email\">Email is required.</span>\r\n            <span v-else>Please enter a valid email.</span>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"form-group mb-3\">\r\n          <label for=\"password\">Password</label>\r\n          <input id=\"password\" v-model=\"user.password\" type=\"password\" class=\"form-control\" placeholder=\"Enter password\" :class=\"{'is-invalid': submitted && !user.password}\" />\r\n          <div v-if=\"submitted && !user.password\" class=\"invalid-feedback\">Password is required.</div>\r\n        </div>\r\n  \r\n        <div class=\"mt-4 d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary btn-block\">Register</button>\r\n        </div>\r\n  \r\n        <div class=\"mt-4 text-center\">\r\n          <h5 class=\"font-size-14 mb-3\">Sign up using</h5>\r\n          <ul class=\"list-inline\">\r\n            <li class=\"list-inline-item\">\r\n              <a href=\"javascript:void(0);\" class=\"social-list-item bg-primary text-white border-primary\">\r\n                <i class=\"mdi mdi-facebook\"></i>\r\n              </a>\r\n            </li>\r\n            <li class=\"list-inline-item\">\r\n              <a href=\"javascript:void(0);\" class=\"social-list-item bg-info text-white border-info\">\r\n                <i class=\"mdi mdi-twitter\"></i>\r\n              </a>\r\n            </li>\r\n            <li class=\"list-inline-item\">\r\n              <a href=\"javascript:void(0);\" class=\"social-list-item bg-danger text-white border-danger\">\r\n                <i class=\"mdi mdi-google\"></i>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n  \r\n        <div class=\"mt-4 text-center\">\r\n          <p class=\"mb-0\">\r\n            By registering you agree to the Skote\r\n            <a href=\"javascript:void(0);\" class=\"text-primary\">Terms of Use</a>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        user: {\r\n          user_name: '',\r\n          email: '',\r\n          password: '',\r\n        },\r\n        submitted: false,\r\n        isError: false,\r\n        errorMsg: '',\r\n      };\r\n    },\r\n    methods: {\r\n      tryToRegisterIn() {\r\n        this.submitted = true;\r\n        if (!this.isValidForm()) {\r\n          return;\r\n        } else {\r\n          // Perform registration logic here\r\n          // Example: calling an action from Vuex store\r\n          this.$store.dispatch('auth/signUp', {\r\n            username: this.user.user_name,\r\n            email: this.user.email,\r\n            password: this.user.password,\r\n          }).then(() => {\r\n            // Handle successful registration\r\n            localStorage.setItem('userToConfirm', JSON.stringify({\r\n              user: this.user.user_name,\r\n              email: this.user.email,\r\n            }));\r\n            this.$router.replace({ name: 'email-verification' });\r\n          }).catch((error) => {\r\n            // Handle registration error\r\n            this.ALERT({\r\n              isSuccess: false,\r\n              isError: true,\r\n              error: error,\r\n            });\r\n          });\r\n        }\r\n      },\r\n      clearAlert() {\r\n        // Clear alert logic here\r\n        this.isError = false;\r\n        this.errorMsg = '';\r\n      },\r\n      isValidForm() {\r\n        // Validate form logic here\r\n        if (!this.user.user_name || !this.user.email || !this.user.password || !this.isValidEmail(this.user.email)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      },\r\n      isValidEmail(email) {\r\n        // Email validation logic here\r\n        // Example: using regular expression\r\n        const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        return emailRegex.test(email);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAgEA;EACAA,KAAA;IACA;MACAC,IAAA;QACAC,SAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,SAAA;MACAC,OAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,gBAAA;MACA,KAAAJ,SAAA;MACA,UAAAK,WAAA;QACA;MACA;QACA;QACA;QACA,KAAAC,MAAA,CAAAC,QAAA;UACAC,QAAA,OAAAZ,IAAA,CAAAC,SAAA;UACAC,KAAA,OAAAF,IAAA,CAAAE,KAAA;UACAC,QAAA,OAAAH,IAAA,CAAAG;QACA,GAAAU,IAAA;UACA;UACAC,YAAA,CAAAC,OAAA,kBAAAC,IAAA,CAAAC,SAAA;YACAjB,IAAA,OAAAA,IAAA,CAAAC,SAAA;YACAC,KAAA,OAAAF,IAAA,CAAAE;UACA;UACA,KAAAgB,OAAA,CAAAC,OAAA;YAAAC,IAAA;UAAA;QACA,GAAAC,KAAA,CAAAC,KAAA;UACA;UACA,KAAAC,KAAA;YACAC,SAAA;YACAnB,OAAA;YACAiB,KAAA,EAAAA;UACA;QACA;MACA;IACA;IACAG,WAAA;MACA;MACA,KAAApB,OAAA;MACA,KAAAC,QAAA;IACA;IACAG,YAAA;MACA;MACA,UAAAT,IAAA,CAAAC,SAAA,UAAAD,IAAA,CAAAE,KAAA,UAAAF,IAAA,CAAAG,QAAA,UAAAuB,YAAA,MAAA1B,IAAA,CAAAE,KAAA;QACA;MACA;MACA;IACA;IACAwB,aAAAxB,KAAA;MACA;MACA;MACA,MAAAyB,UAAA;MACA,OAAAA,UAAA,CAAAC,IAAA,CAAA1B,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}