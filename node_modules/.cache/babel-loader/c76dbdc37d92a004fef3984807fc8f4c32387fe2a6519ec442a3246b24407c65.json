{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiAds from \"../../helpers/apiAds\";\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\nimport vehicles from \"./vehicles\";\nexport default {\n  namespaced: true,\n  state: {\n    ads: [],\n    vehiclePost: {}\n  },\n  mutations: {\n    UPDATE_VEHICLE(state, payload) {\n      Object.assign(state.vehiclePost, payload);\n    },\n    SET(state, payload) {\n      state.ads = payload;\n    },\n    CREATE(state, payload) {\n      state.ads.push(payload);\n    },\n    UPDATE(state, payload) {\n      state.ads.find(item => {\n        if (item.id == payload.id) {\n          Object.assign(item, payload);\n        }\n      });\n    },\n    DELETE(state, id) {\n      state.ads = state.ads.filter(x => x.id !== id);\n    }\n  },\n  getters: {\n    adsList(state) {\n      if (state.ads) {\n        return state.ads;\n      }\n    }\n  },\n  actions: {\n    async fetchAds({\n      commit\n    }, dealerId) {\n      // shows loading animation while getting the data\n      // commit(\"SWITCH_LOADING\");\n      try {\n        let data = await apiAds.getAds(dealerId);\n        // fetch images url in firestore storage & adds each corresponding list of urls to the proper car in cars list.\n        let dataUrl = await apiCarsImages.getCarsImages(data);\n        data.forEach(one => {\n          let imagesUrl = dataUrl.find(x => x.id == one.id).imagesUrl;\n          one.carPicsUrls = imagesUrl;\n        });\n        commit(\"SET\", data);\n        return data;\n      } catch (error) {\n        throw error;\n      } finally {\n        // turns loading to false\n        // commit(\"SWITCH_LOADING\");\n      }\n    },\n    async fetchVehicleById(_, vehicleId) {\n      try {\n        let vehicle = await apiVehicles.getVehicleById(vehicleId);\n        let imagesUrl = await apiCarsImages.getImagesById(vehicle.pics);\n        vehicle.carPicsUrls = imagesUrl;\n        return vehicle;\n      } catch (error) {\n        throw error;\n      } finally {\n        // turns loading to false\n        // commit(\"SWITCH_LOADING\");\n      }\n    },\n    async createProfile(_, data) {\n      try {\n        const response = await apiAds.createAd(data);\n        console.log(response, 'ad created');\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchDealers({\n      commit\n    }) {\n      // shows loading animation while getting the data\n      // commit(\"SWITCH_LOADING\");\n      try {\n        let data = await apiVehicles.getDealers();\n        commit(\"SET_DEALERS\", data);\n        return data;\n      } catch (error) {\n        throw error;\n      } finally {\n        // turns loading to false\n        // commit(\"SWITCH_LOADING\");\n      }\n    },\n    async fetchDealerById(_, dealerId) {\n      try {\n        let dealer = await apiVehicles.getDealerById(dealerId);\n        return dealer;\n      } catch (error) {\n        throw error;\n      } finally {\n        // turns loading to false\n        // commit(\"SWITCH_LOADING\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiAds","apiCarsImages","vehicles","namespaced","state","ads","vehiclePost","mutations","UPDATE_VEHICLE","payload","Object","assign","SET","CREATE","push","UPDATE","find","item","id","DELETE","filter","x","getters","adsList","actions","fetchAds","commit","dealerId","data","getAds","dataUrl","getCarsImages","forEach","one","imagesUrl","carPicsUrls","error","fetchVehicleById","_","vehicleId","vehicle","apiVehicles","getVehicleById","getImagesById","pics","createProfile","response","createAd","console","log","fetchDealers","getDealers","fetchDealerById","dealer","getDealerById"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/adsCrud.js"],"sourcesContent":["import apiAds from \"../../helpers/apiAds\";\r\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\r\nimport vehicles from \"./vehicles\";\r\n\r\nexport default {\r\n\tnamespaced: true,\r\n\r\n\tstate: {\r\n\t\tads: [],\r\n\t\tvehiclePost:{}\r\n\t},\r\n\tmutations: {\r\n\t\tUPDATE_VEHICLE(state, payload) {\r\n\t\t\tObject.assign(state.vehiclePost,payload)\r\n\t\t},\r\n\t\tSET(state, payload) {\r\n\t\t\tstate.ads = payload;\r\n\t\t},\r\n\t\tCREATE(state, payload) {\r\n\t\t\tstate.ads.push(payload);\r\n\t\t},\r\n\t\tUPDATE(state, payload) {\r\n\t\t\tstate.ads.find((item) => {\r\n\t\t\t\tif (item.id == payload.id) {\r\n\t\t\t\t\tObject.assign(item, payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tDELETE(state, id) {\r\n\t\t\tstate.ads = state.ads.filter((x) => x.id !== id);\r\n\t\t},\r\n\t},\r\n\r\n\tgetters: {\r\n\t\tadsList(state) {\r\n\t\t\tif (state.ads) {\r\n\t\t\t\treturn state.ads;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tactions: {\r\n\t\tasync fetchAds({ commit },dealerId) {\r\n\t\t\t// shows loading animation while getting the data\r\n\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\ttry {\r\n\t\t\t\tlet data = await apiAds.getAds(dealerId);\r\n\t\t\t\t// fetch images url in firestore storage & adds each corresponding list of urls to the proper car in cars list.\r\n\t\t\t\tlet dataUrl = await apiCarsImages.getCarsImages(data);\r\n\t\t\t\tdata.forEach((one) => {\r\n\t\t\t\t\tlet imagesUrl = dataUrl.find((x) => x.id == one.id).imagesUrl;\r\n\t\t\t\t\tone.carPicsUrls = imagesUrl;\r\n\t\t\t\t});\r\n\t\t\t\tcommit(\"SET\", data);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} finally {\r\n\t\t\t\t// turns loading to false\r\n\t\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchVehicleById(_, vehicleId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet vehicle = await apiVehicles.getVehicleById(vehicleId);\r\n\t\t\t\tlet imagesUrl = await apiCarsImages.getImagesById(vehicle.pics);\r\n\t\t\t\tvehicle.carPicsUrls = imagesUrl;\r\n\t\t\t\treturn vehicle;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} finally {\r\n\t\t\t\t// turns loading to false\r\n\t\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync createProfile(_, data) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await apiAds.createAd(data);\r\n\t\t\t\tconsole.log(response, 'ad created')\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} \r\n\t\t},\r\n\t\tasync fetchDealers({ commit }) {\r\n\t\t\t// shows loading animation while getting the data\r\n\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\ttry {\r\n\t\t\t\tlet data = await apiVehicles.getDealers();\r\n\t\t\t\tcommit(\"SET_DEALERS\", data);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} finally {\r\n\t\t\t\t// turns loading to false\r\n\t\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchDealerById(_, dealerId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet dealer = await apiVehicles.getDealerById(dealerId);\r\n\t\t\t\treturn dealer;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} finally {\r\n\t\t\t\t// turns loading to false\r\n\t\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}