{"ast":null,"code":"import { auth } from \"../../firebaseConfig\";\nconsole.log(auth);\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, EmailAuthProvider, reauthenticateWithCredential, updatePassword } from \"firebase/auth\";\nimport apiProfile from \"../../helpers/apiProfile\";\n\n//global timer for expiration token\nlet timer;\nexport default {\n  namespaced: true,\n  state: {\n    user: null,\n    alert: {},\n    isLoading: false\n  },\n  mutations: {\n    SET_USER(state, payload) {\n      state.user = payload;\n    },\n    SET_ALERT_MSG(state, payload) {\n      state.alert = payload;\n      console.log({\n        ...state.alert\n      });\n    },\n    TOGGLE_LINK_VISIBILITY(state, {\n      link,\n      isLoggedIn\n    }) {\n      let showNav = true;\n      if (link == \"Dashboard\" && !isLoggedIn || link == \"Join Us\" && isLoggedIn || link == \"Log Out\" && !isLoggedIn) {\n        showNav = false;\n      }\n      return showNav;\n    },\n    TOGGLE_IS_LOADING(state) {}\n  },\n  actions: {\n    async signUp({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await createUserWithEmailAndPassword(auth, email, password);\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async signIn({\n      commit,\n      dispatch\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await signInWithEmailAndPassword(auth, email, password);\n        const currentUser = response._tokenResponse.email;\n        const token = response._tokenResponse.idToken;\n        const expiresIn = response._tokenResponse.expiresIn;\n        const userProfile = await apiProfile.getByAuthId(response.user.uid);\n        const username = userProfile[0].name;\n        const dealerId = userProfile[0].id;\n        const isActive = userProfile[0].active;\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          dispatch(\"singOutUser\");\n          //expects timer in miliseconds\n        }, expiresIn * 1000);\n        commit(\"SET_USER\", {\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        });\n        localStorage.setItem(\"currentUserDealer\", JSON.stringify({\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        }));\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async autoLogIn({\n      commit\n    }) {\n      const currentUserDealer = JSON.parse(localStorage.getItem(\"currentUserDealer\"));\n      if (currentUserDealer) if (currentUserDealer.currentUser && currentUserDealer.token) {\n        commit(\"SET_USER\", currentUserDealer);\n      }\n    },\n    async signOutUser({\n      commit\n    }) {\n      try {\n        await signOut(auth);\n        localStorage.removeItem(\"currentUserDealer\");\n        commit(\"SET_USER\", null);\n        clearTimeout(timer);\n      } catch (error) {\n        throw error;\n      }\n    },\n    async changePassword(_, {\n      currentPassword,\n      newPassword\n    }) {\n      try {\n        const user = auth.currentUser;\n        let credential = EmailAuthProvider.credential(user.email, currentPassword);\n\n        // Re-authenticate the user with their current password\n        const test = await reauthenticateWithCredential(user, credential);\n        console.log(test, \"test\");\n\n        // // Change the password\n        await updatePassword(user, newPassword);\n      } catch (error) {\n        throw error;\n      }\n    }\n  },\n  getters: {\n    isLoggedIn: state => !!(state.user && state.user.isActive),\n    showAlert: state => !!Object.keys(state.alert).length\n  }\n};","map":{"version":3,"names":["auth","console","log","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","EmailAuthProvider","reauthenticateWithCredential","updatePassword","apiProfile","timer","namespaced","state","user","alert","isLoading","mutations","SET_USER","payload","SET_ALERT_MSG","TOGGLE_LINK_VISIBILITY","link","isLoggedIn","showNav","TOGGLE_IS_LOADING","actions","signUp","commit","email","password","response","error","signIn","dispatch","currentUser","_tokenResponse","token","idToken","expiresIn","userProfile","getByAuthId","uid","username","name","dealerId","id","isActive","active","clearTimeout","setTimeout","localStorage","setItem","JSON","stringify","autoLogIn","currentUserDealer","parse","getItem","signOutUser","removeItem","changePassword","_","currentPassword","newPassword","credential","test","getters","showAlert","Object","keys","length"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/auth.js"],"sourcesContent":["import { auth } from \"../../firebaseConfig\";\r\nconsole.log(auth);\r\nimport {\r\n\tcreateUserWithEmailAndPassword,\r\n\tsignInWithEmailAndPassword,\r\n\tsignOut,\r\n\tEmailAuthProvider,\r\n\treauthenticateWithCredential,\r\n\tupdatePassword,\r\n} from \"firebase/auth\";\r\nimport apiProfile from \"../../helpers/apiProfile\";\r\n\r\n//global timer for expiration token\r\nlet timer;\r\nexport default {\r\n\tnamespaced: true,\r\n\tstate: {\r\n\t\tuser: null,\r\n\t\talert: {},\r\n\t\tisLoading:false,\r\n\t},\r\n\tmutations: {\r\n\t\tSET_USER(state, payload) {\r\n\t\t\tstate.user = payload;\r\n\t\t},\r\n\t\tSET_ALERT_MSG(state, payload) {\r\n\t\t\tstate.alert = payload;\r\n\t\t\tconsole.log({ ...state.alert });\r\n\t\t},\r\n\t\tTOGGLE_LINK_VISIBILITY(state, { link, isLoggedIn }) {\r\n\t\t\tlet showNav = true;\r\n\t\t\tif (\r\n\t\t\t\t(link == \"Dashboard\" && !isLoggedIn) ||\r\n\t\t\t\t(link == \"Join Us\" && isLoggedIn) ||\r\n\t\t\t\t(link == \"Log Out\" && !isLoggedIn)\r\n\t\t\t) {\r\n\t\t\t\tshowNav = false;\r\n\t\t\t}\r\n\t\t\treturn showNav;\r\n\t\t},\r\n\t\tTOGGLE_IS_LOADING(state) {\r\n\t\t\t\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t\tasync signUp({ commit }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await createUserWithEmailAndPassword(\r\n\t\t\t\t\tauth,\r\n\t\t\t\t\temail,\r\n\t\t\t\t\tpassword\r\n\t\t\t\t);\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync signIn({ commit, dispatch }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await signInWithEmailAndPassword(auth, email, password);\r\n\r\n\t\t\t\tconst currentUser = response._tokenResponse.email;\r\n\t\t\t\tconst token = response._tokenResponse.idToken;\r\n\t\t\t\tconst expiresIn = response._tokenResponse.expiresIn;\r\n\t\t\t\tconst userProfile = await apiProfile.getByAuthId(response.user.uid);\r\n\t\t\t\tconst username = userProfile[0].name;\r\n\t\t\t\tconst dealerId = userProfile[0].id;\r\n\t\t\t\tconst isActive = userProfile[0].active;\r\n\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\t\tdispatch(\"singOutUser\");\r\n\t\t\t\t\t//expects timer in miliseconds\r\n\t\t\t\t}, expiresIn * 1000);\r\n\r\n\t\t\t\tcommit(\"SET_USER\", {\r\n\t\t\t\t\tcurrentUser,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tisActive,\r\n\t\t\t\t\tdealerId,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t});\r\n\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t\"currentUserDealer\",\r\n\t\t\t\t\tJSON.stringify({ currentUser, token, isActive, dealerId, username })\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync autoLogIn({ commit }) {\r\n\t\t\tconst currentUserDealer = JSON.parse(\r\n\t\t\t\tlocalStorage.getItem(\"currentUserDealer\")\r\n\t\t\t);\r\n\t\t\tif (currentUserDealer)\r\n\t\t\t\tif (currentUserDealer.currentUser && currentUserDealer.token) {\r\n\t\t\t\t\tcommit(\"SET_USER\", currentUserDealer);\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tasync signOutUser({ commit }) {\r\n\t\t\ttry {\r\n\t\t\t\tawait signOut(auth);\r\n\t\t\t\tlocalStorage.removeItem(\"currentUserDealer\");\r\n\t\t\t\tcommit(\"SET_USER\", null);\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync changePassword(_, { currentPassword, newPassword }) {\r\n\t\t\ttry {\r\n\t\t\t\tconst user = auth.currentUser;\r\n\r\n\t\t\t\tlet credential = EmailAuthProvider.credential(\r\n\t\t\t\t\tuser.email,\r\n\t\t\t\t\tcurrentPassword\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Re-authenticate the user with their current password\r\n\t\t\t\tconst test = await reauthenticateWithCredential(user, credential);\r\n\t\t\t\tconsole.log(test, \"test\");\r\n\r\n\t\t\t\t// // Change the password\r\n\t\t\t\tawait updatePassword(user, newPassword);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tisLoggedIn: (state) => !!(state.user && state.user.isActive),\r\n\t\tshowAlert: (state) => !!Object.keys(state.alert).length,\r\n\t},\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}