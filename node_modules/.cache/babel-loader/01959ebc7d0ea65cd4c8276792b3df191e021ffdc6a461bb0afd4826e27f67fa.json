{"ast":null,"code":"import { auth } from \"../../firebaseConfig\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, EmailAuthProvider, reauthenticateWithCredential, updatePassword } from \"firebase/auth\";\nimport apiProfile from \"../../helpers/apiProfile\";\n\n//global timer for expiration token\nlet timer;\nexport default {\n  namespaced: true,\n  state: {\n    user: null,\n    alert: {},\n    isLoading: false,\n    viewPortSize: window.innerWidth\n  },\n  mutations: {\n    SET_VIEWPORT_SIZE(state, payload) {\n      state.viewPortSize = payload;\n    },\n    SET_USER(state, payload) {\n      state.user = payload;\n    },\n    SET_ALERT_MSG(state, payload) {\n      state.alert = payload;\n    },\n    TOGGLE_LINK_VISIBILITY(state, {\n      link,\n      isLoggedIn\n    }) {\n      let showNav = true;\n      if (link == \"Dashboard\" && !isLoggedIn || link == \"Join Us\" && isLoggedIn || link == \"Log Out\" && !isLoggedIn) {\n        showNav = false;\n      }\n      return showNav;\n    },\n    TOGGLE_IS_LOADING(state) {\n      state.isLoading = !state.isLoading;\n    }\n  },\n  actions: {\n    async signUp({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await createUserWithEmailAndPassword(auth, email, password);\n        const currentUser = response._tokenResponse.email;\n        const token = response._tokenResponse.idToken;\n        const expiresIn = response._tokenResponse.expiresIn;\n        // const userProfile = await apiProfile.getByAuthId(response.user.uid);\n        // const username = userProfile[0].name;\n        // const dealerId = userProfile[0].id;\n        // const isActive = userProfile[0].active;\n        console.log(currentUser, token, expiresIn, \"ESTA LOGEADO\");\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async signIn({\n      commit,\n      dispatch\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await signInWithEmailAndPassword(auth, email, password);\n        const currentUser = response._tokenResponse.email;\n        const token = response._tokenResponse.idToken;\n        const expiresIn = response._tokenResponse.expiresIn;\n        const userProfile = await apiProfile.getByAuthId(response.user.uid);\n        const username = userProfile[0].name;\n        const dealerId = userProfile[0].id;\n        const isActive = userProfile[0].active;\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          dispatch(\"singOutUser\");\n          //expects timer in miliseconds\n        }, expiresIn * 1000);\n        commit(\"SET_USER\", {\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        });\n        localStorage.setItem(\"currentUserDealer\", JSON.stringify({\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        }));\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async autoLogIn({\n      commit\n    }) {\n      const currentUserDealer = JSON.parse(localStorage.getItem(\"currentUserDealer\"));\n      if (currentUserDealer) if (currentUserDealer.currentUser && currentUserDealer.token) {\n        commit(\"SET_USER\", currentUserDealer);\n      }\n    },\n    async signOutUser({\n      commit\n    }) {\n      try {\n        await signOut(auth);\n        localStorage.removeItem(\"currentUserDealer\");\n        commit(\"SET_USER\", null);\n        clearTimeout(timer);\n      } catch (error) {\n        throw error;\n      }\n    },\n    async changePassword(_, {\n      currentPassword,\n      newPassword\n    }) {\n      try {\n        const user = auth.currentUser;\n        let credential = EmailAuthProvider.credential(user.email, currentPassword);\n\n        // Re-authenticate the user with their current password\n        const test = await reauthenticateWithCredential(user, credential);\n        console.log(test, \"test\");\n\n        // // Change the password\n        await updatePassword(user, newPassword);\n      } catch (error) {\n        throw error;\n      }\n    },\n    setViewportSize({\n      commit\n    }, payload) {\n      commit(\"SET_VIEWPORT_SIZE\", payload);\n    }\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    showAlert: state => !!Object.keys(state.alert).length,\n    viewportSize: state => state.viewportSize\n  }\n};","map":{"version":3,"names":["auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","EmailAuthProvider","reauthenticateWithCredential","updatePassword","apiProfile","timer","namespaced","state","user","alert","isLoading","viewPortSize","window","innerWidth","mutations","SET_VIEWPORT_SIZE","payload","SET_USER","SET_ALERT_MSG","TOGGLE_LINK_VISIBILITY","link","isLoggedIn","showNav","TOGGLE_IS_LOADING","actions","signUp","commit","email","password","response","currentUser","_tokenResponse","token","idToken","expiresIn","console","log","error","signIn","dispatch","userProfile","getByAuthId","uid","username","name","dealerId","id","isActive","active","clearTimeout","setTimeout","localStorage","setItem","JSON","stringify","autoLogIn","currentUserDealer","parse","getItem","signOutUser","removeItem","changePassword","_","currentPassword","newPassword","credential","test","setViewportSize","getters","showAlert","Object","keys","length","viewportSize"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/auth.js"],"sourcesContent":["import { auth } from \"../../firebaseConfig\";\r\n\r\nimport {\r\n\tcreateUserWithEmailAndPassword,\r\n\tsignInWithEmailAndPassword,\r\n\tsignOut,\r\n\tEmailAuthProvider,\r\n\treauthenticateWithCredential,\r\n\tupdatePassword,\r\n} from \"firebase/auth\";\r\nimport apiProfile from \"../../helpers/apiProfile\";\r\n\r\n//global timer for expiration token\r\nlet timer;\r\nexport default {\r\n\tnamespaced: true,\r\n\tstate: {\r\n\t\tuser: null,\r\n\t\talert: {},\r\n\t\tisLoading: false,\r\n\t\tviewPortSize: window.innerWidth,\r\n\t},\r\n\tmutations: {\r\n\t\tSET_VIEWPORT_SIZE(state, payload) {\r\n\t\t\tstate.viewPortSize = payload;\r\n\t\t},\r\n\t\tSET_USER(state, payload) {\r\n\t\t\tstate.user = payload;\r\n\t\t},\r\n\r\n\t\tSET_ALERT_MSG(state, payload) {\r\n\t\t\tstate.alert = payload;\r\n\t\t},\r\n\t\tTOGGLE_LINK_VISIBILITY(state, { link, isLoggedIn }) {\r\n\t\t\tlet showNav = true;\r\n\t\t\tif (\r\n\t\t\t\t(link == \"Dashboard\" && !isLoggedIn) ||\r\n\t\t\t\t(link == \"Join Us\" && isLoggedIn) ||\r\n\t\t\t\t(link == \"Log Out\" && !isLoggedIn)\r\n\t\t\t) {\r\n\t\t\t\tshowNav = false;\r\n\t\t\t}\r\n\t\t\treturn showNav;\r\n\t\t},\r\n\t\tTOGGLE_IS_LOADING(state) {\r\n\t\t\tstate.isLoading = !state.isLoading;\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tasync signUp({ commit }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await createUserWithEmailAndPassword(\r\n\t\t\t\t\tauth,\r\n\t\t\t\t\temail,\r\n\t\t\t\t\tpassword\r\n\t\t\t\t);\r\n\t\t\t\tconst currentUser = response._tokenResponse.email;\r\n\t\t\t\tconst token = response._tokenResponse.idToken;\r\n\t\t\t\tconst expiresIn = response._tokenResponse.expiresIn;\r\n\t\t\t\t// const userProfile = await apiProfile.getByAuthId(response.user.uid);\r\n\t\t\t\t// const username = userProfile[0].name;\r\n\t\t\t\t// const dealerId = userProfile[0].id;\r\n\t\t\t\t// const isActive = userProfile[0].active;\r\n\t\t\t\tconsole.log(currentUser, token, expiresIn, \"ESTA LOGEADO\");\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync signIn({ commit, dispatch }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await signInWithEmailAndPassword(auth, email, password);\r\n\r\n\t\t\t\tconst currentUser = response._tokenResponse.email;\r\n\t\t\t\tconst token = response._tokenResponse.idToken;\r\n\t\t\t\tconst expiresIn = response._tokenResponse.expiresIn;\r\n\t\t\t\tconst userProfile = await apiProfile.getByAuthId(response.user.uid);\r\n\t\t\t\tconst username = userProfile[0].name;\r\n\t\t\t\tconst dealerId = userProfile[0].id;\r\n\t\t\t\tconst isActive = userProfile[0].active;\r\n\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\t\tdispatch(\"singOutUser\");\r\n\t\t\t\t\t//expects timer in miliseconds\r\n\t\t\t\t}, expiresIn * 1000);\r\n\r\n\t\t\t\tcommit(\"SET_USER\", {\r\n\t\t\t\t\tcurrentUser,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tisActive,\r\n\t\t\t\t\tdealerId,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t});\r\n\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t\"currentUserDealer\",\r\n\t\t\t\t\tJSON.stringify({ currentUser, token, isActive, dealerId, username })\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync autoLogIn({ commit }) {\r\n\t\t\tconst currentUserDealer = JSON.parse(\r\n\t\t\t\tlocalStorage.getItem(\"currentUserDealer\")\r\n\t\t\t);\r\n\t\t\tif (currentUserDealer)\r\n\t\t\t\tif (currentUserDealer.currentUser && currentUserDealer.token) {\r\n\t\t\t\t\tcommit(\"SET_USER\", currentUserDealer);\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tasync signOutUser({ commit }) {\r\n\t\t\ttry {\r\n\t\t\t\tawait signOut(auth);\r\n\t\t\t\tlocalStorage.removeItem(\"currentUserDealer\");\r\n\t\t\t\tcommit(\"SET_USER\", null);\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync changePassword(_, { currentPassword, newPassword }) {\r\n\t\t\ttry {\r\n\t\t\t\tconst user = auth.currentUser;\r\n\r\n\t\t\t\tlet credential = EmailAuthProvider.credential(\r\n\t\t\t\t\tuser.email,\r\n\t\t\t\t\tcurrentPassword\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Re-authenticate the user with their current password\r\n\t\t\t\tconst test = await reauthenticateWithCredential(user, credential);\r\n\t\t\t\tconsole.log(test, \"test\");\r\n\r\n\t\t\t\t// // Change the password\r\n\t\t\t\tawait updatePassword(user, newPassword);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetViewportSize({ commit }, payload) {\r\n\t\t\tcommit(\"SET_VIEWPORT_SIZE\", payload);\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tisLoggedIn: (state) => !!state.user,\r\n\t\tshowAlert: (state) => !!Object.keys(state.alert).length,\r\n\t\tviewportSize: (state) => state.viewportSize,\r\n\t},\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}