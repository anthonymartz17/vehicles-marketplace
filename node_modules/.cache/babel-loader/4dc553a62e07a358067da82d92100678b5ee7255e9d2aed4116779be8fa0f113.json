{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from \"vuex\";\nimport FormProgress from \"./from-progress.vue\";\nimport NavigationBtn from \"./navigation-btn.vue\";\nexport default {\n  components: {\n    FormProgress,\n    NavigationBtn\n  },\n  data() {\n    return {\n      stepsRoutes: [\"create ad\", \"step-2\", \"step-3\", \"step-4\"],\n      vehicleIdFromLocal: null\n    };\n  },\n  mounted() {\n    this.setVehicle();\n  },\n  methods: {\n    ...mapActions(\"adsCrud\", [\"fetchVehicleById\", \"updateVehiclePost\", \"updateVehiclePostImages\", \"fetchImageUrlListById\"]),\n    async setVehicle() {\n      const vehicleId = this.$route.query.id;\n      if (vehicleId != undefined) {\n        localStorage.setItem(\"vehicle_id\", JSON.stringify(vehicleId));\n      }\n      this.vehicleIdFromLocal = JSON.parse(localStorage.getItem(\"vehicle_id\"));\n      if (this.vehicleIdFromLocal) {\n        //fetch and persist data, in case page is reloaded from step2,3 or 4, be able to have access to data, since query.id would be lost from those routes\n        const vehicle = await this.fetchVehicleById(this.vehicleIdFromLocal);\n        const vehicleImages = await this.fetchImageUrlListById(vehicle.pics);\n        const vehicleImagesDetails = vehicleImages.map(image => {\n          return {\n            name: image.name,\n            size: image.size,\n            type: image.type,\n            // or the appropriate image type\n            dataURL: image.url // The URL of the image from Firebase Storage\n          };\n        });\n\n        this.updateVehiclePost(vehicle);\n        localStorage.setItem(\"vehicle_images\", JSON.stringify(vehicleImagesDetails));\n        // this.updateVehiclePostImages(vehicleImagesDetails);\n      }\n    },\n\n    goNext() {\n      if (this.$route.name !== \"step-4\") {\n        // this.$router.push({ name: this.nextRoute });\n        this.$refs.currentView.tryNextStep();\n      } else {\n        this.$refs.currentView.tryCreatePost();\n      }\n    },\n    goBack() {\n      if (this.$route.name !== \"create ad\") {\n        this.$router.push({\n          name: this.backRoute\n        });\n      }\n    }\n  },\n  computed: {\n    ...mapState(\"auth\", [\"user\"]),\n    backRoute() {\n      return this.stepsRoutes[this.stepsRoutes.indexOf(this.$route.name) - 1];\n    },\n    nextRoute() {\n      console.log(this.$refs.currentView.vehicle);\n      return this.stepsRoutes[this.stepsRoutes.indexOf(this.$route.name) + 1];\n    },\n    submitButton() {\n      let text;\n      if (this.$route.name != \"step-4\") {\n        text = \"Next\";\n      } else {\n        text = this.vehicleIdFromLocal ? \"Update Ad\" : \"Create Ad\";\n      }\n      return text;\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","FormProgress","NavigationBtn","components","data","stepsRoutes","vehicleIdFromLocal","mounted","setVehicle","methods","vehicleId","$route","query","id","undefined","localStorage","setItem","JSON","stringify","parse","getItem","vehicle","fetchVehicleById","vehicleImages","fetchImageUrlListById","pics","vehicleImagesDetails","map","image","name","size","type","dataURL","url","updateVehiclePost","goNext","$refs","currentView","tryNextStep","tryCreatePost","goBack","$router","push","backRoute","computed","indexOf","nextRoute","console","log","submitButton","text"],"sources":["src/views/dealer-views/create-ad-post/create-ad.vue"],"sourcesContent":["<script>\r\nimport { mapActions, mapState } from \"vuex\";\r\nimport FormProgress from \"./from-progress.vue\";\r\nimport NavigationBtn from \"./navigation-btn.vue\";\r\nexport default {\r\n\tcomponents: {\r\n\t\tFormProgress,\r\n\t\tNavigationBtn,\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tstepsRoutes: [\"create ad\", \"step-2\", \"step-3\", \"step-4\"],\r\n\t\t\tvehicleIdFromLocal: null,\r\n\t\t};\r\n\t},\r\n\r\n\tmounted() {\r\n\t\tthis.setVehicle();\r\n\t},\r\n\tmethods: {\r\n\t\t...mapActions(\"adsCrud\", [\r\n\t\t\t\"fetchVehicleById\",\r\n\t\t\t\"updateVehiclePost\",\r\n\t\t\t\"updateVehiclePostImages\",\r\n\t\t\t\"fetchImageUrlListById\",\r\n\t\t]),\r\n\t\tasync setVehicle() {\r\n\t\t\tconst vehicleId = this.$route.query.id;\r\n\t\t\tif (vehicleId != undefined) {\r\n\t\t\t\tlocalStorage.setItem(\"vehicle_id\", JSON.stringify(vehicleId));\r\n\t\t\t}\r\n\t\t\tthis.vehicleIdFromLocal = JSON.parse(localStorage.getItem(\"vehicle_id\"));\r\n\t\t\tif (this.vehicleIdFromLocal) {\r\n\t\t\t\t//fetch and persist data, in case page is reloaded from step2,3 or 4, be able to have access to data, since query.id would be lost from those routes\r\n\t\t\t\tconst vehicle = await this.fetchVehicleById(this.vehicleIdFromLocal);\r\n\t\t\t\tconst vehicleImages = await this.fetchImageUrlListById(vehicle.pics);\r\n\t\t\t\tconst vehicleImagesDetails = vehicleImages.map((image) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tname: image.name,\r\n\t\t\t\t\t\tsize: image.size,\r\n\t\t\t\t\t\ttype: image.type, // or the appropriate image type\r\n\t\t\t\t\t\tdataURL: image.url, // The URL of the image from Firebase Storage\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t\tthis.updateVehiclePost(vehicle);\r\n\t\t\t\tlocalStorage.setItem(\"vehicle_images\", JSON.stringify(vehicleImagesDetails));\r\n\t\t\t\t// this.updateVehiclePostImages(vehicleImagesDetails);\r\n\t\t\t}\r\n\t\t},\r\n\t\tgoNext() {\r\n\t\t\tif (this.$route.name !== \"step-4\") {\r\n\t\t\t\t// this.$router.push({ name: this.nextRoute });\r\n\t\t\t\tthis.$refs.currentView.tryNextStep();\r\n\t\t\t} else {\r\n\t\t\t\tthis.$refs.currentView.tryCreatePost();\r\n\t\t\t}\r\n\t\t},\r\n\t\tgoBack() {\r\n\t\t\tif (this.$route.name !== \"create ad\") {\r\n\t\t\t\tthis.$router.push({ name: this.backRoute });\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tcomputed: {\r\n\t\t...mapState(\"auth\", [\"user\"]),\r\n\t\tbackRoute() {\r\n\t\t\treturn this.stepsRoutes[this.stepsRoutes.indexOf(this.$route.name) - 1];\r\n\t\t},\r\n\t\tnextRoute() {\r\n\t\t\tconsole.log(this.$refs.currentView.vehicle);\r\n\t\t\treturn this.stepsRoutes[this.stepsRoutes.indexOf(this.$route.name) + 1];\r\n\t\t},\r\n\t\tsubmitButton() {\r\n\t\t\tlet text;\r\n\t\t\tif (this.$route.name != \"step-4\") {\r\n\t\t\t\ttext = \"Next\";\r\n\t\t\t} else {\r\n\t\t\t\ttext = this.vehicleIdFromLocal ? \"Update Ad\" : \"Create Ad\";\r\n\t\t\t}\r\n\t\t\treturn text;\r\n\t\t},\r\n\t},\r\n};\r\n</script>\r\n\r\n<template>\r\n\t<div class=\"create-ad-wrapper\">\r\n\t\t<div v-if=\"!user.isActive\" class=\"inactive-account\">\r\n\t\t\t<p>Please update profile to activate account</p>\r\n\t\t\t<div class=\"button\">\r\n\t\t\t\t<router-link :to=\"{ name: 'profile' }\">Go to profile</router-link>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div v-else class=\"form-wrapper\">\r\n\t\t\t<FormProgress />\r\n\t\t\t<router-view ref=\"currentView\" />\r\n\r\n\t\t\t<div class=\"btn-container\">\r\n\t\t\t\t<button class=\"button back-btn\" @click=\"goBack()\">Back</button>\r\n\t\t\t\t<button class=\"button next-btn\" @click=\"goNext()\">\r\n\t\t\t\t\t{{ submitButton }}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<style lang=\"scss\" scoped>\r\n.inactive-account {\r\n\twidth: 100%;\r\n\tdisplay: grid;\r\n\tplace-items: center;\r\n\tmargin-block: 3em;\r\n\tfont: $font-mobile-m-bold;\r\n\tcolor: $dark;\r\n\r\n\t&-text {\r\n\t\ttext-align: center;\r\n\t}\r\n}\r\n.button {\r\n\tcursor: pointer;\r\n\tbackground: $primary;\r\n\tfont: $font-text-bold;\r\n\ttext-align: center;\r\n\ttransition: all 250ms ease-in-out;\r\n\tborder: 1px solid $light;\r\n\tmargin: 0.5em;\r\n\t&:hover {\r\n\t\ttransform: scale(1.01);\r\n\t}\r\n\ta {\r\n\t\tcolor: $light;\r\n\t\tpadding: 0.8em;\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n.form-wrapper {\r\n\tpadding: 0 1em;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 1em;\r\n}\r\n\r\n.btn-container {\r\n\tdisplay: flex;\r\n}\r\n.button {\r\n\tflex: 1;\r\n\tcursor: pointer;\r\n\tpadding: 0.8em;\r\n\tfont: $font-text-bold;\r\n\ttext-align: center;\r\n\ttransition: all 250ms ease-in-out;\r\n\tborder: 1px solid $light;\r\n\tmargin: 0.5em;\r\n\tcolor: $light;\r\n\t&:hover {\r\n\t\ttransform: scale(1.01);\r\n\t}\r\n}\r\n\r\n.back-btn {\r\n\tbackground: $lightDark;\r\n}\r\n.next-btn {\r\n\tbackground: $primary;\r\n}\r\n\r\n.create-ad-wrapper {\r\n\t@include breakpoint(tablet) {\r\n\t}\r\n\t@include breakpoint(desktop) {\r\n\t\t.btn-container {\r\n\t\t\tpadding-inline: 8em;\r\n\t\t}\r\n\t}\r\n}\r\n</style>\r\n"],"mappings":";AACA,SAAAA,UAAA,EAAAC,QAAA;AACA,OAAAC,YAAA;AACA,OAAAC,aAAA;AACA;EACAC,UAAA;IACAF,YAAA;IACAC;EACA;EACAE,KAAA;IACA;MACAC,WAAA;MACAC,kBAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,GAAAV,UAAA,aACA,oBACA,qBACA,2BACA,wBACA;IACA,MAAAS,WAAA;MACA,MAAAE,SAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAC,EAAA;MACA,IAAAH,SAAA,IAAAI,SAAA;QACAC,YAAA,CAAAC,OAAA,eAAAC,IAAA,CAAAC,SAAA,CAAAR,SAAA;MACA;MACA,KAAAJ,kBAAA,GAAAW,IAAA,CAAAE,KAAA,CAAAJ,YAAA,CAAAK,OAAA;MACA,SAAAd,kBAAA;QACA;QACA,MAAAe,OAAA,cAAAC,gBAAA,MAAAhB,kBAAA;QACA,MAAAiB,aAAA,cAAAC,qBAAA,CAAAH,OAAA,CAAAI,IAAA;QACA,MAAAC,oBAAA,GAAAH,aAAA,CAAAI,GAAA,CAAAC,KAAA;UACA;YACAC,IAAA,EAAAD,KAAA,CAAAC,IAAA;YACAC,IAAA,EAAAF,KAAA,CAAAE,IAAA;YACAC,IAAA,EAAAH,KAAA,CAAAG,IAAA;YAAA;YACAC,OAAA,EAAAJ,KAAA,CAAAK,GAAA;UACA;QACA;;QACA,KAAAC,iBAAA,CAAAb,OAAA;QACAN,YAAA,CAAAC,OAAA,mBAAAC,IAAA,CAAAC,SAAA,CAAAQ,oBAAA;QACA;MACA;IACA;;IACAS,OAAA;MACA,SAAAxB,MAAA,CAAAkB,IAAA;QACA;QACA,KAAAO,KAAA,CAAAC,WAAA,CAAAC,WAAA;MACA;QACA,KAAAF,KAAA,CAAAC,WAAA,CAAAE,aAAA;MACA;IACA;IACAC,OAAA;MACA,SAAA7B,MAAA,CAAAkB,IAAA;QACA,KAAAY,OAAA,CAAAC,IAAA;UAAAb,IAAA,OAAAc;QAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,GAAA5C,QAAA;IACA2C,UAAA;MACA,YAAAtC,WAAA,MAAAA,WAAA,CAAAwC,OAAA,MAAAlC,MAAA,CAAAkB,IAAA;IACA;IACAiB,UAAA;MACAC,OAAA,CAAAC,GAAA,MAAAZ,KAAA,CAAAC,WAAA,CAAAhB,OAAA;MACA,YAAAhB,WAAA,MAAAA,WAAA,CAAAwC,OAAA,MAAAlC,MAAA,CAAAkB,IAAA;IACA;IACAoB,aAAA;MACA,IAAAC,IAAA;MACA,SAAAvC,MAAA,CAAAkB,IAAA;QACAqB,IAAA;MACA;QACAA,IAAA,QAAA5C,kBAAA;MACA;MACA,OAAA4C,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}