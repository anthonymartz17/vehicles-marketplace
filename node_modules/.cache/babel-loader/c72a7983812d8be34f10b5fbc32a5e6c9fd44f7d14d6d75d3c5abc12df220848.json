{"ast":null,"code":"import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport apiProfile from \"../../helpers/apiProfile\";\n\n//global timer for expiration token\nlet timer;\nexport default {\n  namespaced: true,\n  state: {\n    user: null,\n    alert: {}\n  },\n  mutations: {\n    SET_USER(state, payload) {\n      state.user = payload;\n    },\n    SET_ALERT_MSG(state, payload) {\n      state.alert = payload;\n      console.log({\n        ...state.alert\n      });\n    },\n    SHOULD_SHOW_NAV(link) {\n      console.logI;\n      let showNav = true;\n      if (link == \"Dashboard\" && !this.isLoggedIn || link == \"Join Us\" && this.isLoggedIn || link == \"Log Out\" && !this.isLoggedIn) {\n        showNav = false;\n      }\n      return showNav;\n    }\n  },\n  actions: {\n    async signUp({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await createUserWithEmailAndPassword(getAuth(), email, password);\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async signIn({\n      commit,\n      dispatch\n    }, {\n      email,\n      password\n    }) {\n      try {\n        let response = await signInWithEmailAndPassword(getAuth(), email, password);\n        const currentUser = response._tokenResponse.email;\n        const token = response._tokenResponse.idToken;\n        const expiresIn = response._tokenResponse.expiresIn;\n        const userProfile = await apiProfile.getByAuthId(response.user.uid);\n        const username = userProfile[0].name;\n        const dealerId = userProfile[0].id;\n        const isActive = userProfile[0].active;\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          dispatch(\"singOutUser\");\n          //expects timer in miliseconds\n        }, expiresIn * 1000);\n        commit(\"SET_USER\", {\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        });\n        localStorage.setItem(\"currentUserDealer\", JSON.stringify({\n          currentUser,\n          token,\n          isActive,\n          dealerId,\n          username\n        }));\n        return response.user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async autoLogIn({\n      commit\n    }) {\n      const currentUserDealer = JSON.parse(localStorage.getItem(\"currentUserDealer\"));\n      if (currentUserDealer) if (currentUserDealer.currentUser && currentUserDealer.token) {\n        commit(\"SET_USER\", currentUserDealer);\n      }\n    },\n    async signOutUser({\n      commit\n    }) {\n      try {\n        await signOut(getAuth());\n        localStorage.removeItem(\"currentUserDealer\");\n        commit(\"SET_USER\", null);\n        clearTimeout(timer);\n      } catch (error) {\n        throw error;\n      }\n    }\n  },\n  getters: {\n    isLoggedIn: state => !!(state.user && state.user.isActive),\n    showAlert: state => !!Object.keys(state.alert).length\n  }\n};","map":{"version":3,"names":["getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","apiProfile","timer","namespaced","state","user","alert","mutations","SET_USER","payload","SET_ALERT_MSG","console","log","SHOULD_SHOW_NAV","link","logI","showNav","isLoggedIn","actions","signUp","commit","email","password","response","error","signIn","dispatch","currentUser","_tokenResponse","token","idToken","expiresIn","userProfile","getByAuthId","uid","username","name","dealerId","id","isActive","active","clearTimeout","setTimeout","localStorage","setItem","JSON","stringify","autoLogIn","currentUserDealer","parse","getItem","signOutUser","removeItem","getters","showAlert","Object","keys","length"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/auth.js"],"sourcesContent":["import {\r\n\tgetAuth,\r\n\tcreateUserWithEmailAndPassword,\r\n\tsignInWithEmailAndPassword,\r\n\tsignOut,\r\n} from \"firebase/auth\";\r\nimport apiProfile from \"../../helpers/apiProfile\";\r\n\r\n//global timer for expiration token\r\nlet timer;\r\nexport default {\r\n\tnamespaced: true,\r\n\tstate: {\r\n\t\tuser: null,\r\n\t\talert: {},\r\n\t},\r\n\tmutations: {\r\n\t\tSET_USER(state, payload) {\r\n\t\t\tstate.user = payload;\r\n\t\t},\r\n\t\tSET_ALERT_MSG(state, payload) {\r\n\t\t\tstate.alert = payload;\r\n\t\t\tconsole.log({...state.alert})\r\n\t\t},\r\n\t\tSHOULD_SHOW_NAV(link) {\r\n\t\t\tconsole.logI\r\n\t\t\tlet showNav = true;\r\n\t\t\tif (\r\n\t\t\t\t(link == \"Dashboard\" && !this.isLoggedIn) ||\r\n\t\t\t\t(link == \"Join Us\" && this.isLoggedIn) ||\r\n\t\t\t\t(link == \"Log Out\" && !this.isLoggedIn)\r\n\t\t\t) {\r\n\t\t\t\tshowNav = false;\r\n\t\t\t}\r\n\t\t\treturn showNav;\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tasync signUp({ commit }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await createUserWithEmailAndPassword(\r\n\t\t\t\t\tgetAuth(),\r\n\t\t\t\t\temail,\r\n\t\t\t\t\tpassword\r\n\t\t\t\t);\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync signIn({ commit, dispatch }, { email, password }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await signInWithEmailAndPassword(\r\n\t\t\t\t\tgetAuth(),\r\n\t\t\t\t\temail,\r\n\t\t\t\t\tpassword\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst currentUser = response._tokenResponse.email;\r\n\t\t\t\tconst token = response._tokenResponse.idToken;\r\n\t\t\t\tconst expiresIn = response._tokenResponse.expiresIn;\r\n\t\t\t\tconst userProfile = await apiProfile.getByAuthId(response.user.uid);\r\n\t\t\t\tconst username = userProfile[0].name;\r\n\t\t\t\tconst dealerId = userProfile[0].id;\r\n\t\t\t\tconst isActive = userProfile[0].active;\r\n\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\t\tdispatch(\"singOutUser\");\r\n\t\t\t\t\t//expects timer in miliseconds\r\n\t\t\t\t}, expiresIn * 1000);\r\n\r\n\t\t\t\tcommit(\"SET_USER\", {\r\n\t\t\t\t\tcurrentUser,\r\n\t\t\t\t\ttoken,\r\n\t\t\t\t\tisActive,\r\n\t\t\t\t\tdealerId,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t});\r\n\t\t\t\tlocalStorage.setItem(\r\n\t\t\t\t\t\"currentUserDealer\",\r\n\t\t\t\t\tJSON.stringify({ currentUser, token, isActive, dealerId, username })\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn response.user;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync autoLogIn({ commit }) {\r\n\t\t\tconst currentUserDealer = JSON.parse(\r\n\t\t\t\tlocalStorage.getItem(\"currentUserDealer\")\r\n\t\t\t);\r\n\t\t\tif (currentUserDealer)\r\n\t\t\t\tif (currentUserDealer.currentUser && currentUserDealer.token) {\r\n\t\t\t\t\tcommit(\"SET_USER\", currentUserDealer);\r\n\t\t\t\t}\r\n\t\t},\r\n\t\tasync signOutUser({ commit }) {\r\n\t\t\ttry {\r\n\t\t\t\tawait signOut(getAuth());\r\n\t\t\t\tlocalStorage.removeItem(\"currentUserDealer\");\r\n\t\t\t\tcommit(\"SET_USER\", null);\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tisLoggedIn: (state) => !!(state.user && state.user.isActive),\r\n\t\tshowAlert: (state) => !!Object.keys(state.alert).length,\r\n\t},\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}