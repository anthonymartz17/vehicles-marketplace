{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiAds from \"../../helpers/apiAds\";\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\nimport auth from \"./auth\";\nexport default {\n  namespaced: true,\n  state: {\n    ads: [],\n    vehiclePost: {},\n    vehiclePostImages: []\n  },\n  mutations: {\n    UPDATE_VEHICLEPOST(state, newValue) {\n      state.vehiclePost = {\n        ...state.vehiclePost,\n        ...newValue\n      };\n    },\n    UPDATE_VEHICLEPOST_IMAGES(state, newValue) {\n      state.vehiclePost = newValue;\n    },\n    CLEAR_VEHICLEPOST(state, payload) {\n      state.vehiclePost = payload;\n    },\n    SET(state, payload) {\n      state.ads = payload;\n    },\n    CREATE(state, payload) {\n      state.ads.push(payload);\n    },\n    UPDATE(state, payload) {\n      state.ads.find(item => {\n        if (item.id == payload.id) {\n          Object.assign(item, payload);\n        }\n      });\n    },\n    DELETE(state, id) {\n      state.ads = state.ads.filter(x => x.id !== id);\n    }\n  },\n  getters: {\n    adsList(state) {\n      if (state.ads) {\n        return state.ads;\n      }\n    }\n  },\n  actions: {\n    async fetchAds({\n      commit\n    }, dealerId) {\n      try {\n        let data = await apiAds.getAds(dealerId);\n        // fetch images url in firestore storage & adds each corresponding list of urls to the proper car in cars list.\n        let dataUrl = await apiCarsImages.getCarsImages(data);\n        console.log(dataUrl);\n        data.forEach(one => {\n          let imagesUrl = dataUrl.find(x => x.id == one.id).imagesUrl;\n          one.carPicsUrls = imagesUrl;\n        });\n        commit(\"SET\", data);\n        return data;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchVehicleById(_, vehicleId) {\n      try {\n        let vehicle = await apiAds.getVehicleById(vehicleId);\n        let imagesUrl = await apiCarsImages.getImagesById(vehicle.pics);\n        vehicle.carPicsUrls = imagesUrl;\n        return vehicle;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async createAd(_, {\n      vehicleData,\n      vehicleImages\n    }) {\n      try {\n        vehicleData.dealerId = auth.state.user.dealerId;\n        vehicleData.accessories = vehicleData.accessories.split(\",\");\n        const createdPost = await apiAds.createAd(vehicleData);\n        const uploadedImgPaths = await apiAds.uploadImages({\n          vehicleImages,\n          vehicleId: createdPost.id\n        });\n\n        //creates array pics and spread list of img references\n\n        vehicleData.pics = [...uploadedImgPaths];\n        console.log(vehicleData.pics, \"antes de actualizar\");\n        const updateAd = await apiAds.updateAd({\n          vehicleData,\n          vehicleId: createdPost.id\n        });\n      } catch (error) {\n        throw error;\n      }\n    },\n    async uploadImages(_, data) {\n      try {\n        const response = await apiAds.uploadImages(data);\n        console.log(response, \"images uploaded, state\");\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchImageUrlListById(_, imagePaths) {\n      try {\n        const imgUrlList = await apiAds.getImagesById(imagePaths);\n        return imgUrlList;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async updateAd(_, data) {\n      try {\n        const response = await apiAds.updateAd(data);\n        console.log(response, \"images uploaded, state\");\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchDealers({\n      commit\n    }) {\n      try {\n        let data = await apiVehicles.getDealers();\n        commit(\"SET_DEALERS\", data);\n        return data;\n      } catch (error) {\n        throw error;\n      }\n    },\n    async fetchDealerById(_, dealerId) {\n      try {\n        let dealer = await apiVehicles.getDealerById(dealerId);\n        return dealer;\n      } catch (error) {\n        throw error;\n      }\n    },\n    updateVehiclePost({\n      commit\n    }, newValue) {\n      commit(\"UPDATE_VEHICLEPOST\", newValue);\n    },\n    updateVehiclePostImages({\n      commit\n    }, newValue) {\n      commit(\"UPDATE_VEHICLEPOST_IMAGES\", newValue);\n    },\n    clearVehiclePost({\n      commit\n    }, payload) {\n      commit(\"CLEAR_VEHICLEPOST\", payload);\n    }\n  },\n  getters: {\n    vehiclePost\n  }\n};","map":{"version":3,"names":["apiAds","apiCarsImages","auth","namespaced","state","ads","vehiclePost","vehiclePostImages","mutations","UPDATE_VEHICLEPOST","newValue","UPDATE_VEHICLEPOST_IMAGES","CLEAR_VEHICLEPOST","payload","SET","CREATE","push","UPDATE","find","item","id","Object","assign","DELETE","filter","x","getters","adsList","actions","fetchAds","commit","dealerId","data","getAds","dataUrl","getCarsImages","console","log","forEach","one","imagesUrl","carPicsUrls","error","fetchVehicleById","_","vehicleId","vehicle","getVehicleById","getImagesById","pics","createAd","vehicleData","vehicleImages","user","accessories","split","createdPost","uploadedImgPaths","uploadImages","updateAd","response","fetchImageUrlListById","imagePaths","imgUrlList","fetchDealers","apiVehicles","getDealers","fetchDealerById","dealer","getDealerById","updateVehiclePost","updateVehiclePostImages","clearVehiclePost"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/adsCrud.js"],"sourcesContent":["import apiAds from \"../../helpers/apiAds\";\r\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\r\nimport auth from \"./auth\";\r\nexport default {\r\n\tnamespaced: true,\r\n\r\n\tstate: {\r\n\t\tads: [],\r\n\t\tvehiclePost: {},\r\n\t\tvehiclePostImages: [],\r\n\t\t\r\n\t},\r\n\tmutations: {\r\n\t\tUPDATE_VEHICLEPOST(state, newValue) {\r\n\t\t\tstate.vehiclePost = { ...state.vehiclePost, ...newValue };\r\n\t\t},\r\n\t\tUPDATE_VEHICLEPOST_IMAGES(state, newValue) {\r\n\t\t\tstate.vehiclePost = newValue ;\r\n\t\t},\r\n\t\tCLEAR_VEHICLEPOST(state, payload) {\r\n\t\t\tstate.vehiclePost = payload;\r\n\t\t},\r\n\t\tSET(state, payload) {\r\n\t\t\tstate.ads = payload;\r\n\t\t},\r\n\t\tCREATE(state, payload) {\r\n\t\t\tstate.ads.push(payload);\r\n\t\t},\r\n\t\tUPDATE(state, payload) {\r\n\t\t\tstate.ads.find((item) => {\r\n\t\t\t\tif (item.id == payload.id) {\r\n\t\t\t\t\tObject.assign(item, payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tDELETE(state, id) {\r\n\t\t\tstate.ads = state.ads.filter((x) => x.id !== id);\r\n\t\t},\r\n\t},\r\n\r\n\tgetters: {\r\n\t\tadsList(state) {\r\n\t\t\tif (state.ads) {\r\n\t\t\t\treturn state.ads;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tactions: {\r\n\t\tasync fetchAds({ commit }, dealerId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet data = await apiAds.getAds(dealerId);\r\n\t\t\t\t// fetch images url in firestore storage & adds each corresponding list of urls to the proper car in cars list.\r\n\t\t\t\tlet dataUrl = await apiCarsImages.getCarsImages(data);\r\n\t\t\t\tconsole.log(dataUrl);\r\n\r\n\t\t\t\tdata.forEach((one) => {\r\n\t\t\t\t\tlet imagesUrl = dataUrl.find((x) => x.id == one.id).imagesUrl;\r\n\t\t\t\t\tone.carPicsUrls = imagesUrl;\r\n\t\t\t\t});\r\n\t\t\t\tcommit(\"SET\", data);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchVehicleById(_, vehicleId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet vehicle = await apiAds.getVehicleById(vehicleId);\r\n\t\t\t\tlet imagesUrl = await apiCarsImages.getImagesById(vehicle.pics);\r\n\t\t\t\tvehicle.carPicsUrls = imagesUrl;\r\n\t\t\t\treturn vehicle;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tasync createAd(_, { vehicleData, vehicleImages }) {\r\n\t\t\ttry {\r\n\t\t\t\tvehicleData.dealerId = auth.state.user.dealerId;\r\n\t\t\t\tvehicleData.accessories = vehicleData.accessories.split(\",\");\r\n\r\n\t\t\t\tconst createdPost = await apiAds.createAd(vehicleData);\r\n\t\t\t\tconst uploadedImgPaths = await apiAds.uploadImages({\r\n\t\t\t\t\tvehicleImages,\r\n\t\t\t\t\tvehicleId: createdPost.id,\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//creates array pics and spread list of img references\r\n\r\n\t\t\t\tvehicleData.pics = [...uploadedImgPaths];\r\n\t\t\t\tconsole.log(vehicleData.pics, \"antes de actualizar\");\r\n\t\t\t\tconst updateAd = await apiAds.updateAd({\r\n\t\t\t\t\tvehicleData,\r\n\t\t\t\t\tvehicleId: createdPost.id,\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync uploadImages(_, data) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await apiAds.uploadImages(data);\r\n\t\t\t\tconsole.log(response, \"images uploaded, state\");\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchImageUrlListById(_, imagePaths) {\r\n\t\t\ttry {\r\n\t\t\t\tconst imgUrlList = await apiAds.getImagesById(imagePaths);\r\n\t\t\t\treturn imgUrlList\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync updateAd(_, data) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await apiAds.updateAd(data);\r\n\t\t\t\tconsole.log(response, \"images uploaded, state\");\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchDealers({ commit }) {\r\n\t\t\ttry {\r\n\t\t\t\tlet data = await apiVehicles.getDealers();\r\n\t\t\t\tcommit(\"SET_DEALERS\", data);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync fetchDealerById(_, dealerId) {\r\n\t\t\ttry {\r\n\t\t\t\tlet dealer = await apiVehicles.getDealerById(dealerId);\r\n\t\t\t\treturn dealer;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateVehiclePost({ commit }, newValue) {\r\n\t\t\tcommit(\"UPDATE_VEHICLEPOST\", newValue);\r\n\t\t},\r\n\t\tupdateVehiclePostImages({ commit }, newValue) {\r\n\t\t\tcommit(\"UPDATE_VEHICLEPOST_IMAGES\", newValue);\r\n\t\t},\r\n\t\tclearVehiclePost({ commit }, payload) {\r\n\t\t\tcommit(\"CLEAR_VEHICLEPOST\", payload);\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tvehiclePost\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}