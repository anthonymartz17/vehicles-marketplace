{"ast":null,"code":"import apiVehicles from \"../../helpers/apiVehicles\";\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\nexport default {\n  namespaced: true,\n  state: {\n    vehicles: [],\n    filters: {\n      make: \"\",\n      models: \"\",\n      priceFrom: 0,\n      priceTo: 0,\n      yearFrom: 0,\n      yearTo: 0,\n      carType: \"\",\n      carCondition: \"\",\n      fuel: \"\",\n      transmission: \"\",\n      driveTrain: \"\",\n      mileage: \"\",\n      engine: \"\",\n      color: \"\"\n    }\n  },\n  mutations: {\n    SET_CARS(state, payload) {\n      state.vehicles = payload;\n    },\n    //add the imagesUrl array property to each corresponding car in vehicles array\n    SET_CARS_IMAGESURL(state, payload) {\n      state.vehicles.forEach(one => {\n        let imagesUrl = payload.find(x => x.id == one.id).imagesUrl;\n        one.carPicsUrls = imagesUrl;\n      });\n    },\n    UPDATE_FILTERS(state, payload) {\n      state.filters = {\n        ...state.filters,\n        ...payload\n      };\n    },\n    FILTER_VEHICLES(state) {\n      let results = state.vehicles;\n      if (state.filters.carCondition !== \"\" && state.filters.carCondition !== \"New/Used\") {\n        results = results.filter(one => one.carCondition === state.filters.carCondition);\n      }\n      if (state.filters.fuel !== \"\" && state.filters.fuel !== \"All\") {\n        results = results.filter(one => one.fuel === state.filters.fuel);\n      }\n      if (state.filters.transmission !== \"\" && state.filters.transmission !== \"All\") {\n        results = results.filter(one => one.transmission === state.filters.transmission);\n      }\n      if (state.filters.driveTrain !== \"\" && state.filters.driveTrain !== \"All\") {\n        results = results.filter(one => one.driveTrain === state.filters.driveTrain);\n      }\n      if (state.filters.engine !== \"\" && state.filters.engine !== \"All\") {\n        results = results.filter(one => {\n          if (one.engine != undefined && one.engine.toLowerCase().includes(state.filters.engine.toLowerCase())) {\n            return one;\n          }\n        });\n      }\n      if (state.filters.mileage !== \"\" && state.filters.mileage !== \"All\") {\n        let reg = /\\d+/g;\n        // finds the numbers in a string and returns them in an array.\n        let nums = state.filters.mileage.match(reg);\n        // setting numbers at position zero and one to min and max respectively and converting them to thousands.\n        let min = +nums[0] * 1000;\n        let max = +nums[1] * 1000;\n        results = results.filter(one => {\n          let miles = +one.miles.replace(\",\", \"\");\n          if (max) {\n            return miles > min && miles < max;\n          } else {\n            return miles > min;\n          }\n        });\n      }\n      if (state.filters.color !== \"\" && state.filters.color !== \"All\") {\n        results = results.filter(one => one.colorEx === state.filters.color);\n      }\n      if (state.filters.carType !== \"\") {\n        results = results.filter(one => one.carType.toLowerCase().includes(state.filters.carType.toLowerCase().trim()));\n\n        // state.inputTextUser = state.filters.carType;\n      }\n\n      if (state.filters.priceFrom != 0) {\n        results = results.filter(one => one.price >= state.filters.priceFrom);\n      }\n      if (state.filters.priceTo != 0) {\n        results = results.filter(one => one.price <= state.filters.priceTo);\n      }\n      if (state.filters.yearFrom > 0) {\n        results = results.filter(one => one.year >= state.filters.yearFrom);\n      }\n      if (state.filters.yearTo > 0) {\n        results = results.filter(one => one.year <= state.filters.yearTo);\n      }\n      // the following condition ensures to show selected make, and in case all makes is selected, it doesnt get into the condition which makes the program run as if nothing was selected and shows all makes avalables.\n      if (state.filters.make !== \"\" && state.filters.make !== \"All Makes\") {\n        results = results.filter(one => one.make.toLowerCase().includes(state.filters.make.toLowerCase().trim()));\n      }\n      if (state.filters.models != \"\" && state.filters.models != `All ${state.filters.make}`) {\n        results = results.filter(one => one.model.toLowerCase().includes(state.filters.models.toLowerCase().trim()));\n      }\n      localStorage.setItem(\"searchResults\", JSON.stringify(results));\n      state.showDropDownTextField = false;\n      console.log(results);\n    }\n  },\n  getters: {\n    vehiclesList(state) {\n      if (state.vehicles) {\n        return state.vehicles;\n      }\n    }\n  },\n  actions: {\n    async fetchCars({\n      commit\n    }) {\n      // shows loading animation while getting the data\n      // commit(\"SWITCH_LOADING\");\n      try {\n        let data = await apiVehicles.getCars();\n        let dataUrl = await apiCarsImages.getCarsImages(data);\n        data.forEach(one => {\n          let imagesUrl = dataUrl.find(x => x.id == one.id).imagesUrl;\n          one.carPicsUrls = imagesUrl;\n        });\n        commit(\"SET_CARS\", data);\n        return data;\n      } catch (error) {\n        throw error;\n      } finally {\n        // turns loading to false\n        // commit(\"SWITCH_LOADING\");\n      }\n    }\n    // async fetchCarsImages({ commit}, carsData) {\n    // \t// shows loading animation while getting the data\n    // \t// commit(\"SWITCH_LOADING\");\n    // \ttry {\n    // \t\tlet dataUrl = await apiCarsImages.getCarsImages(carsData);\n    // \t\tcommit(\"SET_CARS_IMAGESURL\", dataUrl);\n    // \t} catch (error) {\n    // \t\tthrow error;\n    // \t} finally {\n    // \t\t// turns loading to false\n    // \t\t// commit(\"SWITCH_LOADING\");\n    // \t}\n    // },\n  }\n};","map":{"version":3,"names":["apiVehicles","apiCarsImages","namespaced","state","vehicles","filters","make","models","priceFrom","priceTo","yearFrom","yearTo","carType","carCondition","fuel","transmission","driveTrain","mileage","engine","color","mutations","SET_CARS","payload","SET_CARS_IMAGESURL","forEach","one","imagesUrl","find","x","id","carPicsUrls","UPDATE_FILTERS","FILTER_VEHICLES","results","filter","undefined","toLowerCase","includes","reg","nums","match","min","max","miles","replace","colorEx","trim","price","year","model","localStorage","setItem","JSON","stringify","showDropDownTextField","console","log","getters","vehiclesList","actions","fetchCars","commit","data","getCars","dataUrl","getCarsImages","error"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/store/modules/vehicles.js"],"sourcesContent":["import apiVehicles from \"../../helpers/apiVehicles\";\r\nimport apiCarsImages from \"../../helpers/apiCarsImages\";\r\n\r\nexport default {\r\n\tnamespaced: true,\r\n\r\n\tstate: {\r\n\t\tvehicles: [],\r\n\t\tfilters: {\r\n\t\t\tmake: \"\",\r\n\t\t\tmodels: \"\",\r\n\t\t\tpriceFrom: 0,\r\n\t\t\tpriceTo: 0,\r\n\t\t\tyearFrom: 0,\r\n\t\t\tyearTo: 0,\r\n\t\t\tcarType: \"\",\r\n\t\t\tcarCondition: \"\",\r\n\t\t\tfuel: \"\",\r\n\t\t\ttransmission: \"\",\r\n\t\t\tdriveTrain: \"\",\r\n\t\t\tmileage: \"\",\r\n\t\t\tengine: \"\",\r\n\t\t\tcolor: \"\",\r\n\t\t},\r\n\t},\r\n\tmutations: {\r\n\t\tSET_CARS(state, payload) {\r\n\t\t\tstate.vehicles = payload;\r\n\t\t},\r\n\t\t//add the imagesUrl array property to each corresponding car in vehicles array\r\n\t\tSET_CARS_IMAGESURL(state, payload) {\r\n\t\t\tstate.vehicles.forEach((one) => {\r\n\t\t\t\tlet imagesUrl = payload.find((x) => x.id == one.id).imagesUrl;\r\n\t\t\t\tone.carPicsUrls = imagesUrl;\r\n\t\t\t});\r\n\t\t},\r\n\t\tUPDATE_FILTERS(state, payload) {\r\n\t\t\tstate.filters = { ...state.filters, ...payload };\r\n\t\t},\r\n\t\tFILTER_VEHICLES(state) {\r\n\t\t\tlet results = state.vehicles;\r\n\r\n\t\t\tif (\r\n\t\t\t\tstate.filters.carCondition !== \"\" &&\r\n\t\t\t\tstate.filters.carCondition !== \"New/Used\"\r\n\t\t\t) {\r\n\t\t\t\tresults = results.filter(\r\n\t\t\t\t\t(one) => one.carCondition === state.filters.carCondition\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (state.filters.fuel !== \"\" && state.filters.fuel !== \"All\") {\r\n\t\t\t\tresults = results.filter((one) => one.fuel === state.filters.fuel);\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\tstate.filters.transmission !== \"\" &&\r\n\t\t\t\tstate.filters.transmission !== \"All\"\r\n\t\t\t) {\r\n\t\t\t\tresults = results.filter(\r\n\t\t\t\t\t(one) => one.transmission === state.filters.transmission\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\tstate.filters.driveTrain !== \"\" &&\r\n\t\t\t\tstate.filters.driveTrain !== \"All\"\r\n\t\t\t) {\r\n\t\t\t\tresults = results.filter(\r\n\t\t\t\t\t(one) => one.driveTrain === state.filters.driveTrain\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (state.filters.engine !== \"\" && state.filters.engine !== \"All\") {\r\n\t\t\t\tresults = results.filter((one) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tone.engine != undefined &&\r\n\t\t\t\t\t\tone.engine\r\n\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t.includes(state.filters.engine.toLowerCase())\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn one;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (state.filters.mileage !== \"\" && state.filters.mileage !== \"All\") {\r\n\t\t\t\tlet reg = /\\d+/g;\r\n\t\t\t\t// finds the numbers in a string and returns them in an array.\r\n\t\t\t\tlet nums = state.filters.mileage.match(reg);\r\n\t\t\t\t// setting numbers at position zero and one to min and max respectively and converting them to thousands.\r\n\t\t\t\tlet min = +nums[0] * 1000;\r\n\t\t\t\tlet max = +nums[1] * 1000;\r\n\r\n\t\t\t\tresults = results.filter((one) => {\r\n\t\t\t\t\tlet miles = +one.miles.replace(\",\", \"\");\r\n\r\n\t\t\t\t\tif (max) {\r\n\t\t\t\t\t\treturn miles > min && miles < max;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn miles > min;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (state.filters.color !== \"\" && state.filters.color !== \"All\") {\r\n\t\t\t\tresults = results.filter((one) => one.colorEx === state.filters.color);\r\n\t\t\t}\r\n\t\t\tif (state.filters.carType !== \"\") {\r\n\t\t\t\tresults = results.filter((one) =>\r\n\t\t\t\t\tone.carType\r\n\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t.includes(state.filters.carType.toLowerCase().trim())\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// state.inputTextUser = state.filters.carType;\r\n\t\t\t}\r\n\t\t\tif (state.filters.priceFrom != 0) {\r\n\t\t\t\tresults = results.filter((one) => one.price >= state.filters.priceFrom);\r\n\t\t\t}\r\n\t\t\tif (state.filters.priceTo != 0) {\r\n\t\t\t\tresults = results.filter((one) => one.price <= state.filters.priceTo);\r\n\t\t\t}\r\n\t\t\tif (state.filters.yearFrom > 0) {\r\n\t\t\t\tresults = results.filter((one) => one.year >= state.filters.yearFrom);\r\n\t\t\t}\r\n\t\t\tif (state.filters.yearTo > 0) {\r\n\t\t\t\tresults = results.filter((one) => one.year <= state.filters.yearTo);\r\n\t\t\t}\r\n\t\t\t// the following condition ensures to show selected make, and in case all makes is selected, it doesnt get into the condition which makes the program run as if nothing was selected and shows all makes avalables.\r\n\t\t\tif (state.filters.make !== \"\" && state.filters.make !== \"All Makes\") {\r\n\t\t\t\tresults = results.filter((one) =>\r\n\t\t\t\t\tone.make\r\n\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t.includes(state.filters.make.toLowerCase().trim())\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tstate.filters.models != \"\" &&\r\n\t\t\t\tstate.filters.models != `All ${state.filters.make}`\r\n\t\t\t) {\r\n\t\t\t\tresults = results.filter((one) =>\r\n\t\t\t\t\tone.model\r\n\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t.includes(state.filters.models.toLowerCase().trim())\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tlocalStorage.setItem(\"searchResults\", JSON.stringify(results));\r\n\t\t\tstate.showDropDownTextField = false;\r\n\t\t\tconsole.log(results);\r\n\t\t},\r\n\t},\r\n\r\n\tgetters: {\r\n\t\tvehiclesList(state) {\r\n\t\t\tif (state.vehicles) {\r\n\t\t\t\treturn state.vehicles;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tactions: {\r\n\t\tasync fetchCars({ commit }) {\r\n\t\t\t// shows loading animation while getting the data\r\n\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\ttry {\r\n\t\t\t\tlet data = await apiVehicles.getCars();\r\n\t\t\t\tlet dataUrl = await apiCarsImages.getCarsImages(data);\r\n\t\t\t\tdata.forEach((one) => {\r\n\t\t\t\t\tlet imagesUrl = dataUrl.find((x) => x.id == one.id).imagesUrl;\r\n\t\t\t\t\tone.carPicsUrls = imagesUrl;\r\n\t\t\t\t});\r\n\t\t\t\tcommit(\"SET_CARS\", data);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthrow error;\r\n\t\t\t} finally {\r\n\t\t\t\t// turns loading to false\r\n\t\t\t\t// commit(\"SWITCH_LOADING\");\r\n\t\t\t}\r\n\t\t},\r\n\t\t// async fetchCarsImages({ commit}, carsData) {\r\n\t\t// \t// shows loading animation while getting the data\r\n\t\t// \t// commit(\"SWITCH_LOADING\");\r\n\t\t// \ttry {\r\n\t\t// \t\tlet dataUrl = await apiCarsImages.getCarsImages(carsData);\r\n\t\t// \t\tcommit(\"SET_CARS_IMAGESURL\", dataUrl);\r\n\t\t// \t} catch (error) {\r\n\t\t// \t\tthrow error;\r\n\t\t// \t} finally {\r\n\t\t// \t\t// turns loading to false\r\n\t\t// \t\t// commit(\"SWITCH_LOADING\");\r\n\t\t// \t}\r\n\t\t// },\r\n\t},\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}