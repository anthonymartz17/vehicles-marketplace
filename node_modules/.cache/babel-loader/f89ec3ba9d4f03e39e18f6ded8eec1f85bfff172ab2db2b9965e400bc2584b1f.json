{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs, addDoc } from \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAwIN2cWNmZlb_jZBjhHeJVS3UymQAGc4M\",\n  authDomain: \"vehicles-marketplace.firebaseapp.com\",\n  projectId: \"vehicles-marketplace\",\n  storageBucket: \"vehicles-marketplace.appspot.com\",\n  messagingSenderId: \"775154818578\",\n  appId: \"1:775154818578:web:d182643d23d2c6c0d182cb\",\n  measurementId: \"G-5PT2T0VZB5\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\n//initialize service\nconst db = getFirestore();\n// collection refference\n\nconst colRef = collection(db, \"cars\");\nasync function uploadImages() {\n  const folderPath = '../public/images/cars';\n  console.log(firebase.storage());\n  try {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(folderPath);\n    const folderSnapshot = await folderRef.listAll();\n\n    // Iterate through each image file in the folder\n    for (const imageRef of folderSnapshot.items) {\n      const imageName = imageRef.name;\n      const uniqueId = uuidv4();\n      const newImageName = `${uniqueId}_${imageName}`;\n\n      // Upload the image file with the new name to Firebase Storage\n      const newImageRef = storageRef.child(`${folderPath}/${newImageName}`);\n      await newImageRef.put(await imageRef.getData());\n    }\n    console.log('Image upload complete.');\n  } catch (error) {\n    console.error('Image upload error:', error);\n  }\n}\nuploadImages();\n// Now you have an array of file names in the `imageFiles` variable\n// You can use this array to upload the images to Firebase Storage\n\n//get collection data\n\n// getDocs(colRef).then((snapshot) => {\n// \tsnapshot.docs.forEach((one) => {\n// \t\tconsole.log({ ...one.data(), id: one.id });\n// \t});\n// });\n\n// Function to add a car document to Firestore\n\n// const addDealer = async (car) => {\n// \ttry {\n// \t\tconst docRef = await addDoc(colRef, car);\n// \t\tconsole.log(\"Document written with ID: \", docRef.id);\n// \t} catch (error) {\n// \t\tconsole.error(\"Error adding document: \", error);\n// \t}\n// };\n// // // Fetch the JSON file\n// fetch(\"http://localhost:3000/cars\")\n// \t.then((response) => response.json())\n// \t.then((dealersData) => {\n// \t\tdealersData.forEach((dealer) => {\n// \t\t\taddDealer(dealer);\n// \t\t});\n// \t})\n// \t.catch((error) => {\n// \t\tconsole.error(\"Error fetching dealer data:\", error);\n// \t});\n\nexport default app;","map":{"version":3,"names":["initializeApp","getFirestore","collection","getDocs","addDoc","v4","uuidv4","firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","colRef","uploadImages","folderPath","console","log","storage","storageRef","ref","folderRef","child","folderSnapshot","listAll","imageRef","items","imageName","name","uniqueId","newImageName","newImageRef","put","getData","error","app"],"sources":["D:/Cursos programacion/Projects Only/vehicles-marketplace/src/firebase.config.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, collection, getDocs, addDoc } from \"firebase/firestore\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\n\r\n\r\n// Your Firebase configuration\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyAwIN2cWNmZlb_jZBjhHeJVS3UymQAGc4M\",\r\n\tauthDomain: \"vehicles-marketplace.firebaseapp.com\",\r\n\tprojectId: \"vehicles-marketplace\",\r\n\tstorageBucket: \"vehicles-marketplace.appspot.com\",\r\n\tmessagingSenderId: \"775154818578\",\r\n\tappId: \"1:775154818578:web:d182643d23d2c6c0d182cb\",\r\n\tmeasurementId: \"G-5PT2T0VZB5\",\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\n\r\n//initialize service\r\nconst db = getFirestore();\r\n// collection refference\r\n\r\nconst colRef = collection(db, \"cars\");\r\n\r\nasync function uploadImages() {\r\n\tconst folderPath = '../public/images/cars'; \r\n\tconsole.log(firebase.storage())\r\n\ttry {\r\n\t\tconst storageRef = firebase.storage().ref();\r\n\t\tconst folderRef = storageRef.child(folderPath);\r\n\t\tconst folderSnapshot = await folderRef.listAll();\r\n\r\n\t\t// Iterate through each image file in the folder\r\n\t\tfor (const imageRef of folderSnapshot.items) {\r\n\t\t\tconst imageName = imageRef.name;\r\n\t\t\tconst uniqueId = uuidv4();\r\n\t\t\tconst newImageName = `${uniqueId}_${imageName}`;\r\n\r\n\t\t\t// Upload the image file with the new name to Firebase Storage\r\n\t\t\tconst newImageRef = storageRef.child(`${folderPath}/${newImageName}`);\r\n\t\t\tawait newImageRef.put(await imageRef.getData());\r\n\t\t}\r\n\r\n\t\tconsole.log('Image upload complete.');\r\n\t} catch (error) {\r\n\t\tconsole.error('Image upload error:', error);\r\n\t}\r\n}\r\nuploadImages();\r\n// Now you have an array of file names in the `imageFiles` variable\r\n// You can use this array to upload the images to Firebase Storage\r\n\r\n//get collection data\r\n\r\n// getDocs(colRef).then((snapshot) => {\r\n// \tsnapshot.docs.forEach((one) => {\r\n// \t\tconsole.log({ ...one.data(), id: one.id });\r\n// \t});\r\n// });\r\n\r\n// Function to add a car document to Firestore\r\n\r\n// const addDealer = async (car) => {\r\n// \ttry {\r\n// \t\tconst docRef = await addDoc(colRef, car);\r\n// \t\tconsole.log(\"Document written with ID: \", docRef.id);\r\n// \t} catch (error) {\r\n// \t\tconsole.error(\"Error adding document: \", error);\r\n// \t}\r\n// };\r\n// // // Fetch the JSON file\r\n// fetch(\"http://localhost:3000/cars\")\r\n// \t.then((response) => response.json())\r\n// \t.then((dealersData) => {\r\n// \t\tdealersData.forEach((dealer) => {\r\n// \t\t\taddDealer(dealer);\r\n// \t\t});\r\n// \t})\r\n// \t.catch((error) => {\r\n// \t\tconsole.error(\"Error fetching dealer data:\", error);\r\n// \t});\r\n\r\nexport default app;\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,oBAAoB;AAC9E,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAO,kBAAkB;;AAGzB;AACA,MAAMC,cAAc,GAAG;EACtBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,sCAAsC;EAClDC,SAAS,EAAE,sBAAsB;EACjCC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AAChB,CAAC;;AAED;AACAf,aAAa,CAACQ,cAAc,CAAC;;AAE7B;AACA,MAAMQ,EAAE,GAAGf,YAAY,CAAC,CAAC;AACzB;;AAEA,MAAMgB,MAAM,GAAGf,UAAU,CAACc,EAAE,EAAE,MAAM,CAAC;AAErC,eAAeE,YAAYA,CAAA,EAAG;EAC7B,MAAMC,UAAU,GAAG,uBAAuB;EAC1CC,OAAO,CAACC,GAAG,CAACd,QAAQ,CAACe,OAAO,CAAC,CAAC,CAAC;EAC/B,IAAI;IACH,MAAMC,UAAU,GAAGhB,QAAQ,CAACe,OAAO,CAAC,CAAC,CAACE,GAAG,CAAC,CAAC;IAC3C,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,CAACP,UAAU,CAAC;IAC9C,MAAMQ,cAAc,GAAG,MAAMF,SAAS,CAACG,OAAO,CAAC,CAAC;;IAEhD;IACA,KAAK,MAAMC,QAAQ,IAAIF,cAAc,CAACG,KAAK,EAAE;MAC5C,MAAMC,SAAS,GAAGF,QAAQ,CAACG,IAAI;MAC/B,MAAMC,QAAQ,GAAG3B,MAAM,CAAC,CAAC;MACzB,MAAM4B,YAAY,GAAI,GAAED,QAAS,IAAGF,SAAU,EAAC;;MAE/C;MACA,MAAMI,WAAW,GAAGZ,UAAU,CAACG,KAAK,CAAE,GAAEP,UAAW,IAAGe,YAAa,EAAC,CAAC;MACrE,MAAMC,WAAW,CAACC,GAAG,CAAC,MAAMP,QAAQ,CAACQ,OAAO,CAAC,CAAC,CAAC;IAChD;IAEAjB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACtC,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACflB,OAAO,CAACkB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC5C;AACD;AACApB,YAAY,CAAC,CAAC;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeqB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}